<?xml version="1.0" encoding="UTF-8"?>
<config_list>
  <tool_config version="1.0.72" mwdt_version="O-2018.09" />
  <configuration name="BCRs" filename="bcr_contents.txt">
    <string><![CDATA[
	0x4	0x44		IDENTITY
	0x18	0x80000000	AUX_DCCM
	0x60	0x2		BCR_VER
	0x68	0x410		VECBASE_AC_BUILD
	0x6d	0x31004		MPU_BUILD
	0x6e	0x2		RF_BUILD
	0x70	0x1		SEC_VECBASE_BUILD
	0x72	0x215105	D_CACHE_BUILD
	0x74	0x905		DCCM_BUILD
	0x75	0x1010d05	TIMER_BUILD
	0x76	0x605		AP_BUILD
	0x77	0x135105	I_CACHE_BUILD
	0x78	0x905		ICCM_BUILD
	0x7a	0x3521		DSP_BUILD
	0x7b	0x22206		MULTIPLY_BUILD
	0x7c	0x3		SWAP_BUILD
	0x7d	0x3		NORM_BUILD
	0x7e	0x2		MINMAX_BUILD
	0x7f	0x303		BARREL_BUILD
	0xc1	0x12047402	ISA_CONFIG
	0xc3	0xf0000012	DMP_PP_BUILD
	0xc5	0x2		STACK_REGION_BUILD
	0xc7	0x50000004	ERP_BUILD
	0xc8	0x1004f03	FPU_BUILD
	0xcd	0x120f02	DMAC_BUILD
	0xdb	0x1005		SEC_BUILD
	0xf0	0x101063	SUBSYS_BUILD
	0xf1	0x101		CORE_CONFIG
	0xf2	0x503		RTT_BUILD
	0xf3	0x34d6101	IRQ_BUILD
	0xf5	0x8080104	PCT_BUILD
	0xf6	0x6f0004	CC_BUILD
	0xff	0x2003		SMART_BUILD
	0x208	0x60000000	AUX_ICCM
	0xa00	0x1000		SUBSYS_DSP_0_BUILD
	0xa04	0x171700f0	SUBSYS_IO_0_BUILD
	0xa05	0x7		SUBSYS_IO_1_BUILD
	0xa06	0x111		SUBSYS_IO_2_BUILD
	0xa1e	0x100000	SUBSYS_UAUX_OFFSET
	0xa1f	0x80000000	SUBSYS_APEX_OFFSET
]]></string>
  </configuration>
  <configuration name="build_version_info" filename="build_version_info.txt">
    <string><![CDATA[
Version Information:
    ARChitect O-2018.09
    IP Libraries:
        ARCv2EM            v5.0.32
        ARC Data Fusion IP Subsystem DSP  v1.1.6
        ARC Data Fusion IP Subsystem INFRA  v1.1.6
        ARC Data Fusion IP Subsystem IO  v1.1.6
        ARC Data Fusion IP Subsystem SPEECH  v1.1.6
        ARC RTT            v1.0.22
        ARC xCAM           v4.3.7
        ARCv2EM_CCT        v5.0.32
        EMSDP_BOARD        v1.0.0
        Implementation     v5.0.32
        Tool Configuration  v1.0.72
]]></string>
  </configuration>
  <configuration name="mw_compiler" filename="ccac.arg">
    <string><![CDATA[
	-arcv2em
	-core4
	-HL
	-Xcode_density
	-Xdiv_rem=radix2
	-Xswap
	-Xbitscan
	-Xmpy_option=mpyd
	-Xshift_assist
	-Xbarrel_shifter
	-Xdsp2
	-Xdsp_complex
	-Xdsp_divsqrt=radix2
	-Xdsp_itu
	-Xdsp_accshift=full
	-Xfpus_div
	-Xfpu_mac
	-Xfpuda
	-Xfpus_mpy_slow
	-Xfpus_div_slow
	-Xfpu_pipe_impl
	-Xtimer0
	-Xsec_timer0
	-Xrtc
	-Xstack_check
	-dcache=16384,32,2,a
	-Hccm
	-Xsec_modes
	-Xdmac
]]></string>
  </configuration>
  <configuration name="mw_debugger" filename="mdb.arg">
    <string><![CDATA[
	-arcv2em 
	-core4 
	-rgf_num_banks=1 
	-rgf_num_wr_ports=1 
	-Xcode_density 
	-Xdiv_rem=radix2 
	-turbo_boost 
	-Xswap 
	-Xbitscan 
	-Xmpy_option=mpyd 
	-Xshift_assist 
	-Xbarrel_shifter 
	-Xdsp2 
	-Xdsp_complex 
	-Xdsp_divsqrt=radix2 
	-Xdsp_itu 
	-Xdsp_accshift=full 
	-Xfpus_div 
	-Xfpu_mac 
	-Xfpuda 
	-Xfpus_mpy_slow 
	-Xfpus_div_slow 
	-Xfpu_pipe_impl 
	-Xtimer0 
	-Xtimer0_level=1 
	-Xsec_timer0 
	-Xsec_timer0_level=1 
	-Xrtc 
	-action_points=8 
	-Xstack_check 
	-smart_stack_entries=8 
	-mpuv4 
	-mpu_sid 
	-mpu_regions=16 
	-interrupts=97 
	-interrupt_priorities=4 
	-ext_interrupts=77 
	-interrupt_base=0x400 
	-sec_interrupt_base=0x0 
	-dcache=16384,32,2,a 
	-dcache_feature=2 
	-icache=16384,64,2,a 
	-icache_feature=1 
	-dccm_size=0x20000 
	-dccm_base=0x80000000 
	-iccm0_size=0x20000 
	-iccm0_base=0x60000000 
	-esp_encrypt 
	-Xsec_modes 
	-iccm0_sec_lvl=NS 
	-dccm_sec_lvl=NS 
	-error_prot_ver=4 
	-ccm_prot_pipelined 
	-watchdog 
	-watchdog_size=32 
	-Xpct_counters=8 
	-dmac 
	-dmac_channels=16 
	-dmac_registers=0 
	-dmac_fifo_depth=2 
	-dmac_int_config=multiple_internal 
]]></string>
  </configuration>
  <configuration name="nSIM" filename="nsim.props">
    <string><![CDATA[
	nsim_isa_family=av2em
	nsim_isa_core=4
	arcver=0x44
	nsim_isa_rgf_num_banks=1
	nsim_isa_rgf_num_regs=32
	nsim_isa_rgf_num_wr_ports=1
	nsim_isa_big_endian=0
	nsim_isa_lpc_size=32
	nsim_isa_pc_size=32
	nsim_isa_addr_size=32
	nsim_isa_code_density_option=2
	nsim_isa_div_rem_option=1
	nsim_isa_turbo_boost=1
	nsim_isa_swap_option=1
	nsim_isa_bitscan_option=1
	nsim_isa_mpy_option=8
	nsim_isa_shift_option=3
	nsim_isa_dsp_option=2
	nsim_isa_dsp_complex_option=1
	nsim_isa_dsp_divsqrt_option=1
	nsim_isa_dsp_itu_option=1
	nsim_isa_dsp_accshift_option=2
	nsim_isa_fpus_div_option=1
	nsim_isa_fpu_mac_option=1
	nsim_isa_fpuda_option=1
	nsim_isa_fpu_fast_mpy_option=0
	nsim_isa_fpu_fast_div_option=0
	nsim_isa_fpu_pipe_impl=1
	nsim_isa_enable_timer_0=1
	nsim_isa_timer_0_int_level=1
	nsim_isa_enable_sec_timer_0=1
	nsim_isa_stimer_0_int_level=1
	nsim_isa_rtc_option=1
	nsim_isa_num_actionpoints=8
	nsim_isa_stack_checking=1
	nsim_isa_smart_stack_entries=8
	mpu_sid_option=1
	mpu_regions=16
	mpu_version=4
	nsim_isa_number_of_interrupts=97
	nsim_isa_number_of_levels=4
	nsim_isa_number_of_external_interrupts=77
	nsim_isa_intvbase_preset=0x400
	nsim_isa_intvbase_preset_s=0x0
	dcache=16384,32,2,a
	nsim_isa_dc_feature_level=2
	icache=16384,64,2,a
	nsim_isa_ic_feature_level=1
	dccm_size=0x20000
	dccm_base=0x80000000
	iccm0_size=0x20000
	iccm0_base=0x60000000
	nsim_isa_has_secure=1
	nsim_isa_sec_modes_option=1
	iccm0_sec_lvl=NS
	dccm_sec_lvl=NS
	nsim_isa_error_prot=4
	nsim_isa_error_prot_ccm_wb=1
	nsim_isa_watchdog=1
	nsim_isa_watchdog_size=32
	nsim_isa_pct_counters=8
	nsim_isa_dmac_option=1
	nsim_isa_dmac_channels=16
	nsim_isa_dmac_registers=0
	nsim_isa_dmac_fifo_depth=2
	nsim_isa_dmac_int_config=multiple_internal
]]></string>
  </configuration>
  <configuration name="IDE" filename="ide.props">
    <string><![CDATA[
	processor.family=4
	processor.core_version=4
	processor.family_name=arcv2em
	processor.rgf_num_banks=1
	processor.rgf_num_wr_ports=1
	processor.endian=little
	processor.lpc_size=32
	processor.pc_size=32
	processor.addr_size=32
	processor.Xcode_density=1
	processor.Xdiv_rem=radix2
	processor.turbo_boost=1
	processor.Xswap=1
	processor.Xbitscan=1
	processor.Xmpy_option=mpyd
	processor.Xshift_assist=1
	processor.Xbarrel_shifter=1
	processor.Xdsp2=1
	processor.Xdsp_complex=1
	processor.Xdsp_divsqrt=radix2
	processor.Xdsp_itu=1
	processor.Xdsp_accshift=full
	processor.Xfpus_div=1
	processor.Xfpu_mac=1
	processor.Xfpuda=1
	processor.Xfpus_mpy_slow=1
	processor.Xfpus_div_slow=1
	processor.Xfpu_pipe_impl=1
	processor.Xtimer0=1
	processor.Xtimer0_level=1
	processor.Xsec_timer0=1
	processor.Xsec_timer0_level=1
	processor.Xrtc=1
	processor.action_points=8
	processor.Xstack_check=1
	processor.smart_stack_entries=8
	processor.mpuv4=1
	processor.mpu_sid=1
	processor.mpu.regions=16
	processor.interrupts=97
	processor.interrupt_priorities=4
	processor.ext_interrupts=77
	processor.interrupt_base=0x400
	processor.sec_interrupt_base=0x0
	processor.dcache.size=16384
	processor.dcache.line_size=32
	processor.dcache.ways=2
	processor.dcache_feature=2
	processor.icache.size=16384
	processor.icache.line_size=64
	processor.icache.ways=2
	processor.icache_feature=1
	processor.dccm_size=0x20000
	processor.dccm_base=0x80000000
	processor.Hccm=1
	processor.iccm0_size=0x20000
	processor.iccm0_base=0x60000000
	processor.esp_encrypt=1
	processor.Xsec_modes=1
	processor.iccm0_sec_lvl=NS
	processor.dccm_sec_lvl=NS
	processor.error_prot_ver=4
	processor.ccm_prot_pipelined=1
	processor.watchdog=1
	processor.watchdog_size=32
	processor.Xpct_counters=8
	processor.dmac=1
	processor.dmac_channels=16
	processor.dmac_registers=0
	processor.dmac_fifo_depth=2
	processor.dmac_int_config=multiple_internal
	processor.tcf_include1=apexextensions.h
	processor.tcf_include2=core_config.h
]]></string>
  </configuration>
  <configuration name="architect" filename="build_configuration.txt">
    <string><![CDATA[
######## project_emsdp_em7d_esp_dfss_RC0 --- com.arc.templates.project.Empty.1_0 ########

# BuildHTMLDocs --- Creates custom HTML documentation in the 'docs' directory.
-build_html_docs true

# BuildSoftware --- Creates software under the Software directory.
-build_software true

# BuildTestCode --- Creates test source code under the 'tests' directory.
-build_test_code true

# BuildScripts --- Creates synthesis scripts and configuration files, which are required for hierarchy generation.
-build_scripts true

# BuildHDL --- Creates the behavioural and synthesisable HDL source code.
-build_hdl true

# CompileTestCode --- Compiles and assembles the test code.
-compile_test_code false

# GenerateStructuralHDL --- Generate the necessary structural HDL
-generate_structural_hdl true

# CompileForHDLSimulation --- Compile the HDL ready for simulation, using the selected Simulator.
-compile_hdl_for_simulation false

# BuildXCAM --- 
# When true, build the XCAM cycle accurate model from HDL.
# This happens only when the VTOC component (in the XCAM library) has been added to the design.
# 
-build_xcam false

# RunARCsyn --- Synthesize design using ARCsyn
-run_arcsyn false

# RunSEIF --- Run Synopsys Embedit Integrator Flow to generate configured memory instances
-run_seif false

# RunARCrams --- Run ARCrams on the current build, this will stitch in vendor supplied RAM models and update the synthesis and simulation environment to use the models.
-run_arcrams false

# RunARCformal --- Formal Verification using ARCformal
-run_arcformal false

# RunARCpower --- Run the Power Analysis using RTL simulation to derive the activity
-run_arcpower false

# compile_nsim_user_extensions --- Build nSIM extensions for any APEX components in the current design using their C Models.
-compile_nsim_user_extension false

# compile_translated_nsim_extensions --- Converts APEX extensions from Verilog to C++ and compiles the model for nSIM.
-compile_translated_nsim_extensions false

# compile_iss_user_extensions --- Build ISS extensions for any APEX components in the current design using their C Models.
-compile_iss_user_extensions false

# compile_translated_iss_extensions --- Converts APEX extensions from Verilog to C++ and compiles the model for the ISS.
-compile_translated_iss_extensions false


######## System --- com.arc.hardware.System.1_0 ########

# Create System
-create com.arc.hardware.System.1_0 System

# Testbench --- 
# Only the rascal testbench is supported, and is required by ARCtest.
# 	
-testbench rascal

# SynthesisLevel --- 
# Sets the top level module name for synthesis.  
# 
# If not using core_sys: for single-core designs, cpu_isle is used; for multicore designs, archipelago is used.
# 	
-synthesislevel cpu_isle/archipelago

# GateLevelSim --- When selected the gate level sim test code and scripts would be installed to run ARCgatesim
-gatesim true

# UserLibraryName --- The name for your HDL library
-library_name user

# OPTION_SimulatorName --- The name of the simulator you wish to use
-simulator vcs

# sim64 --- When selected, the 64-bit version of the simulator is used.  Be sure you have the 64-bit-capable simulator installed  and $ARCHITECT_ROOT/lib/linux_x86_64/ added to your LD_LIBRARY_PATH.
# The setting of this option affects the content of the generated makefile_interface_*_verilog, where * is the simulator name.
-sim64 false

# verilog_2001 --- Enable Verilog 2001 file-io syntax (if false: use pli)
-verilog_2001 true

# export_srams_to --- Where to place srams, if not cpu_top
-export_srams_to none

# copy_prefix --- 
# A Copy Prefix P causes creation of a separate copy of the entire Verilog build where each Verilog filename, module, and `define is prefixed with P and copied to a separate directory named P.
# 	
-copy_prefix ""


######## CPUisle --- com.arc.hardware.CPU_isle.1_0 ########

# Create CPUisle
-create com.arc.hardware.CPU_isle.1_0 System.CPUisle

# unique_name --- verilog module modifier prefix
-unique_name ""

# ArcNum --- The processor number as read back in the ARCNUM field of the IDENTITY register.
-arc_num 0

# instances --- 
# The number of instantiations of this core.
# 
-instances 1

# instance_signal_prefix --- 
# [arc_dev] Specifies the prefix used for each instance, when multiple instances are created.  If N is in the text, N is replaced by the instance number; otherwise the instance number is appended.
# 
-instance_signal_prefix c

# skip_vpp --- 
# This is a secret option, not seen by customers.
# If you check this, we won't VPP most of the *.vpp files.
# This can speed up re-build if you've already built them and not
# changed the core options.
# Use at your own risk.
# 	
-skip_vpp false

# OPTION_remove_tmpdir --- 
# This is a secret option, not seen by customers.
# If you uncheck this, we'll leave in place the temporary directory in which RTL is generated to support unique_name.
# 	
-remove_tmpdir true

# CPUFloorplan --- Floorplan giving relative placement of the RAMs  for the given configuration of ARCv2HS or ARCv2EM in this CPUisle
-cpu_floorplan create

# userCPUFloorplanPath --- Pathname of user floorplan for the CPU when using a hierarchical implementation
-usercpufloorplan_path ""

# pinLocationConstraintsFile --- Pathname+filename of the physical pin location constraints file or just "side1" (all pins on l.h.s) or "side2" (pins on top only) or "side3" (pins on r.h.s. only) or "side4" (pins on bottom only) to get a template file generated
-pin_location_constraints_file ""


######## ARCv2EM --- com.arc.hardware.ARCv2EM.1_0 ########

# Create ARCv2EM
-create com.arc.hardware.ARCv2EM.1_0 System.CPUisle.ARCv2EM

# arcv2em --- Description to follow
-arcv2em true

# def_div2ref --- This specifies the clock division factor at reset. It is used for mss clock controller to generate core clock, and the value N means core is running at (1/N) x ref_clk.
-def_div2ref 1

# addr_size --- This defines the address bus width (in bits).
-addr_size 32

# pc_size --- This defines the program counter (in bits).
-pc_size 32

# lpc_size --- This defines the size of the loop counter (in bits).
-lpc_size 32

# halt_on_reset --- This defines whether the core is halted initially on reset.
-halt_on_reset true

# byte_order --- This defines the endianness of the core.
-byte_order little

# sep_option --- Enable PC/RF and other key register protection for SEP.
-sep_option false

# code_density_option --- This reduces the size of program memory by adding instructions that condense commonly used instruction patterns with some marginal increase in processor gate count. The added instructions are ENTER_S, LEAVE_S, JLI_S, BI, BIH.
-code_density_option true

# bitscan_option --- This adds instructions for efficient search of bits within a 32 bit word, including normalize (NORM, NORMH, NORMW) and find first or last set bit (FFS, FLS) instructions.
-bitscan_option true

# shift_option --- The Shift ISA option adds variable and multi-length shift rotation instructions:  (0) No shift/rotation instructions (1) ASR16, ASR8, LSR8, LSL8, ROL8, ROR8 (2) ASRM, ASLM, LSRM, RORM (3) ASR16, ASR8, LSR8, LSL8, ROL8, ROR8, ASRM, ASLM, LSRM, RORM
-shift_option 3

# swap_option --- This adds two instructions used to swap half-words or bytes in a 32b word. Useful for converting between little to big endianess and vice-versa.
-swap_option true

# div_rem_option --- The DIV/REM option adds non-blocking multi-cycle implementation of integer divide/remainder functions. Added instructions are DIV, DIVU (integer divide), REM and REMU (integer divide remainder).radix2 takes 33 cycles.  radix4_enhanced takes 3 to 19 cycles per operation.
-div_rem_option none

# mpy_option --- The Multiplier ISA option allows selection between several multiplier configurations to tradeoff performance with silicon area.
# For select multiply options, when the DIV/REM option is also selected, some datapath resources will be shared between the multiply and divide pipeline to minimize total area.
# 
# Cycle count (16-bit, lower 32-bit or upper 32-bit) for the different configurations is as follows:
# <pre>
# 
# option  16/L32/U32  Instructions
# ------  ----------  ---------------------
#       
# none	  -/-/-     None
# wlh1	  1/1/1     MPYW/U, MPY/U, MPYH/U
# wlh2	  2/2/2     MPYW/U, MPY/U, MPYH/U
# wlh3	  2/3/3     MPYW/U, MPY/U, MPYH/U
# wlh4	  2/4/5     MPYW/U, MPY/U, MPYH/U
# wlh5	  5/9/9     MPYW/U, MPY/U, MPYH/U
# </pre>
# 
-mpy_option none

# code_protection --- The ARC EM architecture divides the memory into 16 regions, which can be protected individually.  This feature adds a 16-bit input to the processor core, one bit per region. When the protect bit is set, the processor disables any load or store to the corresponding region.  An attempt to access a protected region raises an EV_ProtV exception.
-code_protection false

# stack_checking --- Stack checking is a mechanism for checking stack accesses and raising an exception when a stack overflow or underflow is detected.
-stack_checking true

# unaligned_option --- This enables unaligned loads and stores.
-unaligned_option false

# intvbase_preset --- This sets the interrupt vector base configuration register, VECBASE_AC_BUILD. The vector base address is aligned to a 1KB boundary, so the required address value should be divided by 1K (i.e. do not include the lower 10 bits). On reset, this register is loaded into the interrupt vector base address register, INT_VECTOR_BASE.
-intvbase_preset 0x1

# intvbase_preset_s --- This sets the secure interrupt vector base configuration register, VECBASE_AC_BUILD. The vector base address is aligned to a 1KB boundary, so the required address value should be divided by 1K (i.e. do not include the lower 10 bits). On reset, this register is loaded into the interrupt vector base address register, INT_VECTOR_BASE_S.This is effective only when 2+2 mode is enabled.
-intvbase_preset_s 0x0

# intvbase_ext --- Set this option to drive the upper 22 bits of the interrupt base vector externally, into signal intvbase_in.
-intvbase_ext false

# nmi_option --- add Non-maskable external exception support
-nmi_option false

# rgf_impl --- This defines whether the register file is implemented using flip-flops, or with a hard macro.
-rgf_impl flip_flops

# rgf_num_regs --- This defines the size (in 32b register) of the processor register file.
-rgf_num_regs 32

# rgf_wr_ports --- This defines the number of write ports on the register file.
-rgf_wr_ports 1

# rgf_num_banks --- Dual register banks are useful if Fast IRQ has been configured, but may be selected even if not.
-rgf_num_banks 1

# rgf_banked_regs --- This selects the number of registers that are replicated in the second register-file bank.
-rgf_banked_regs 32

# turbo_boost --- This enables the Turbo Boost synthesis option. By enabling this option, the achievable clock frequency is increased, but at the cost of an additional cycle latency on branch instructions.
-turbo_boost true

# infer_alu_adder --- infer: datapath is described as behavioral code: A + B
# instantiate: datapath is instantiated as a detailed multi-stage code of a carry-lookahead adder.  It is generally preferable to use the infer option and add directives for your target synthesizer. 
-infer_alu_adder infer

# infer_mpy_wtree --- infer: datapath is described as behavioral code: A * B (applies to only wlh3, wlh4 and wlh5 designs)
# instantiate: datapath is instantiated as a detailed multi-stage code of a Wallace Tree multiplier It is generally preferable to use the infer option and add directives for your target synthesizer. 
-infer_mpy_wtree instantiate

# scantest_ram_bypass_mux --- This mux is used to make logic trapped between flops and memory (aka shadow logic) to be covered by scantest without requiring advanced sequential ATPG on the memory to be applied. Will add delay to functional access time
-scantest_ram_bypass_mux false

# logic_bist --- This option will OR LBIST_EN with test_mode
-logic_bist false

# power_domains --- Adds three separate power domains to the core, and propagates power-gate control signals to the top level of the core. Also generates UPF constraints and commands in the low-power scripts
-power_domains false

# dvfs --- Adds logic to the core to allow dynamic controlling of voltage and frequency and propagates the associated control signals to the top level of core
-dvfs false

# voltage_domains --- Creates a voltage  domain split between RAM and std cell parts to support Ultra Low Voltage on cells and generates UPF constraints
-voltage_domains false

# mem_bus_option --- The core supports two bus protocols for accessing external memory: AHB & AHB-Lite. AHB-Lite-single means instruction fetch and data access share a single AHB-Lite port. AHB-Lite-dual means separate AHB-Lite port for each initiator if present.
-mem_bus_option AHB-Lite-dual

# mem_bus_reg_interface --- Specifies whether the memory bus interface is registered.
-mem_bus_reg_interface true

# dmi_burst_option --- This will enable high-throughput burst support on the DMI slave interfaces. By enabling this option, the peak DMI read throughput goes from 1 word per 3 cycles to N words per N+2 cycles, in which N is the AHB burst lengthDMI write throughput goes from 1 word per 3 cycles to 1 word per cycle.
-dmi_burst_option true

# has_dmp_peripheral --- This option enables the redirection of load/store accesses to one segment (1/16) of the addressable space to a dedicated peripheral bus. This offers high system integration and reduces overall system cost.
-has_dmp_peripheral true

# per0_base --- This option specifies the memory region assignment for this peripheral aperture
-per0_base 15

# per0_limit --- This option specifies the end of this peripheral aperture
-per0_limit 0

# per_bus_option --- The core supports one bus protocol for accessing the peripheral space, when enabled: AHB-Lite.
-per_bus_option AHB-Lite

# per_bus_reg_interface --- Specifies whether the peripheral bus interface is registered.
-per_bus_reg_interface true

# clock_gating --- This enables the insertion of architectural clock gate elements in the design. By enabling this option, the clocks to various parts of the design will be disabled when the logic they drive is not in use to save power.
-clock_gating false

# back_compat --- This enables the addition of rst_a input in the clkgate module to support backward compatibility with the older EM and Subsystem releases.
-back_compat true

# byte_parity --- If parity protection on the CCMs or Cache is configured, this option enables parity protection on a per-byte basis. Otherwise, parity is per word basis
-byte_parity false

# prot_pipelined --- Check the box if CCM memories are configured for ECC, and you want single-bit errors to be corrected, written back to memory, and re-fetched. When unchecked, single bit errors are corrected when read from memory, but the offending memory location itself is not corrected with a writeback, no influence on Cache protection
-prot_pipelined false

# cct_test_ena --- When ECC is configured, this option enables single bit error injection in CCT RAM models to demonstrate ECC protection on the RAMs. When enabled, the RAM models can only be used in HDL CCT simulation (no xCAM support) and are not intended for use in SoC level integration.
-cct_test_ena false

# err_prot_ehce --- Enabled enhanced ECC architecture for CCM. Instruction fetch with single bit error is not replayed; ecc cac modules are shared to reduce area and timing opt.
-err_prot_ehce false


######## dsp_trig --- com.arc.hardware.dfss.dsp_trig.1_0 ########

# Create dsp_trig
-create com.arc.hardware.dfss.dsp_trig.1_0 System.CPUisle.ARCv2EM.dsp_trig

# dsp_trig --- Command line option for EIA extension component 'dsp_trig'.
-dsp_trig true

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_gpio0 --- com.arc.hardware.dfss.io_gpio0.1_0 ########

# Create io_gpio0
-create com.arc.hardware.dfss.io_gpio0.1_0 System.CPUisle.ARCv2EM.io_gpio0

# io_gpio0 --- Command line option for EIA extension component 'io_gpio0'.
-io_gpio0 true

# io_gpio0_debounce --- Selects the inclusion of Debounce logic
-io_gpio0_debounce 1

# io_gpio0_readback_sync --- Selects the inclusion of metastability registers on the read back path when reading the external 'ext_porta' signal
-io_gpio0_readback_sync 1

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0

# io_gpio0_direction_rst_value --- Reset value of the SWPORTA_DDR register, which determines the direction (input/output) of the GPIO interface. 0: input, 1: output.
-io_gpio0_direction_rst_value 0

# io_gpio0_output_rst_value --- Reset value of the SWPORTA_DR register, which determines the reset value of the GPIO output ports. Bits corresponding to input ports are ignored.
-io_gpio0_output_rst_value 0x0


######## io_i2c_mst0 --- com.arc.hardware.dfss.io_i2c_mst0.1_0 ########

# Create io_i2c_mst0
-create com.arc.hardware.dfss.io_i2c_mst0.1_0 System.CPUisle.ARCv2EM.io_i2c_mst0

# io_i2c_mst0 --- Command line option for APEX extension component 'io_i2c_mst0'.
-io_i2c_mst0 true

# io_i2c_mst0_fs --- RX/TX FIFO size
-io_i2c_mst0_fs 16

# io_i2c_mst0_dma_support --- Specifies whether the DMA handshake interface is included
-io_i2c_mst0_dma_support None

# io_i2c_mst0_cdc_included --- Selects whether a clock-domain crossing (CDC) is included between the core clock and the serial clock. If no CDC is present, both clocks must be synchronous. Otherwise the core clock frequency may be higher than, lower than or equal to the serial clock frequency.
-io_i2c_mst0_cdc_included 0

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_i2c_slv0 --- com.arc.hardware.dfss.io_i2c_slv0.1_0 ########

# Create io_i2c_slv0
-create com.arc.hardware.dfss.io_i2c_slv0.1_0 System.CPUisle.ARCv2EM.io_i2c_slv0

# io_i2c_slv0 --- Command line option for APEX extension component 'io_i2c_slv0'.
-io_i2c_slv0 true

# io_i2c_slv0_fs --- RX/TX FIFO size
-io_i2c_slv0_fs 16

# io_i2c_slv0_dma_support --- Specifies whether the DMA handshake interface is included
-io_i2c_slv0_dma_support None

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_spi_mst0 --- com.arc.hardware.dfss.io_spi_mst0.1_0 ########

# Create io_spi_mst0
-create com.arc.hardware.dfss.io_spi_mst0.1_0 System.CPUisle.ARCv2EM.io_spi_mst0

# io_spi_mst0 --- Command line option for APEX extension component 'io_spi_mst0'.
-io_spi_mst0 true

# io_spi_mst0_fz --- RX/TX FIFO depth
-io_spi_mst0_fs 16

# io_spi_mst0_max_xfer_size --- This defines the maximum number of bits per word at the serial data port, which determines the FIFO width.
-io_spi_mst0_max_xfer_size 16

# io_spi_mst0_cdc_included --- Selects whether a clock-domain crossing (CDC) is included between the core clock and the peripheral clock. If no CDC is present, both clocks must be synchronous. Otherwise the core clock frequency may be higher than or equal to the peripheral clock frequency.
-io_spi_mst0_cdc_included 0

# io_spi_mst0_dma_support --- Selects whether support for the ARC EM DMA is included and whether the handshake interface should be connected to a memory-based or to an Aux-based DMA channel.
-io_spi_mst0_dma_support Memory-Based

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## subsys_bcr --- com.arc.hardware.dfss.subsys_bcr.1_0 ########

# Create subsys_bcr
-create com.arc.hardware.dfss.subsys_bcr.1_0 System.CPUisle.ARCv2EM.subsys_bcr

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_spi_mst1 --- com.arc.hardware.dfss.io_spi_mst1.1_0 ########

# Create io_spi_mst1
-create com.arc.hardware.dfss.io_spi_mst1.1_0 System.CPUisle.ARCv2EM.io_spi_mst1

# io_spi_mst1 --- Command line option for APEX extension component 'io_spi_mst1'.
-io_spi_mst1 true

# io_spi_mst1_fz --- RX/TX FIFO depth
-io_spi_mst1_fs 16

# io_spi_mst1_max_xfer_size --- This defines the maximum number of bits per word at the serial data port, which determines the FIFO width.
-io_spi_mst1_max_xfer_size 16

# io_spi_mst1_cdc_included --- Selects whether a clock-domain crossing (CDC) is included between the core clock and the peripheral clock. If no CDC is present, both clocks must be synchronous. Otherwise the core clock frequency may be higher than or equal to the peripheral clock frequency.
-io_spi_mst1_cdc_included 0

# io_spi_mst1_dma_support --- Selects whether support for the ARC EM DMA is included and whether the handshake interface should be connected to a memory-based or to an Aux-based DMA channel.
-io_spi_mst1_dma_support Memory-Based

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_spi_mst2 --- com.arc.hardware.dfss.io_spi_mst2.1_0 ########

# Create io_spi_mst2
-create com.arc.hardware.dfss.io_spi_mst2.1_0 System.CPUisle.ARCv2EM.io_spi_mst2

# io_spi_mst2 --- Command line option for APEX extension component 'io_spi_mst2'.
-io_spi_mst2 true

# io_spi_mst2_fz --- RX/TX FIFO depth
-io_spi_mst2_fs 16

# io_spi_mst2_max_xfer_size --- This defines the maximum number of bits per word at the serial data port, which determines the FIFO width.
-io_spi_mst2_max_xfer_size 16

# io_spi_mst2_cdc_included --- Selects whether a clock-domain crossing (CDC) is included between the core clock and the peripheral clock. If no CDC is present, both clocks must be synchronous. Otherwise the core clock frequency may be higher than or equal to the peripheral clock frequency.
-io_spi_mst2_cdc_included 0

# io_spi_mst2_dma_support --- Selects whether support for the ARC EM DMA is included and whether the handshake interface should be connected to a memory-based or to an Aux-based DMA channel.
-io_spi_mst2_dma_support None

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_spi_slv0 --- com.arc.hardware.dfss.io_spi_slv0.1_0 ########

# Create io_spi_slv0
-create com.arc.hardware.dfss.io_spi_slv0.1_0 System.CPUisle.ARCv2EM.io_spi_slv0

# io_spi_slv0 --- Command line option for APEX extension component 'io_spi_slv0'.
-io_spi_slv0 true

# io_spi_slv0_fz --- RX/TX FIFO depth
-io_spi_slv0_fs 16

# io_spi_slv0_max_xfer_size --- This defines the maximum number of bits per word at the serial data port, which determines the FIFO width.
-io_spi_slv0_max_xfer_size 16

# io_spi_slv0_dma_support --- Selects whether support for the ARC EM DMA is included and whether the handshake interface should be connected to a memory-based or to an Aux-based DMA channel.
-io_spi_slv0_dma_support Memory-Based

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_gpio1 --- com.arc.hardware.dfss.io_gpio1.1_0 ########

# Create io_gpio1
-create com.arc.hardware.dfss.io_gpio1.1_0 System.CPUisle.ARCv2EM.io_gpio1

# io_gpio1 --- Command line option for EIA extension component 'io_gpio1'.
-io_gpio1 true

# io_gpio1_debounce --- Selects the inclusion of Debounce logic
-io_gpio1_debounce 1

# io_gpio1_readback_sync --- Selects the inclusion of metastability registers on the read back path when reading the external 'ext_porta' signal
-io_gpio1_readback_sync 1

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0

# io_gpio1_direction_rst_value --- Reset value of the SWPORTA_DDR register, which determines the direction (input/output) of the GPIO interface. 0: input, 1: output.
-io_gpio1_direction_rst_value 0

# io_gpio1_output_rst_value --- Reset value of the SWPORTA_DR register, which determines the reset value of the GPIO output ports. Bits corresponding to input ports are ignored.
-io_gpio1_output_rst_value 0x0


######## io_gpio2 --- com.arc.hardware.dfss.io_gpio2.1_0 ########

# Create io_gpio2
-create com.arc.hardware.dfss.io_gpio2.1_0 System.CPUisle.ARCv2EM.io_gpio2

# io_gpio2 --- Command line option for EIA extension component 'io_gpio2'.
-io_gpio2 true

# io_gpio2_debounce --- Selects the inclusion of Debounce logic
-io_gpio2_debounce 1

# io_gpio2_readback_sync --- Selects the inclusion of metastability registers on the read back path when reading the external 'ext_porta' signal
-io_gpio2_readback_sync 1

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0

# io_gpio2_direction_rst_value --- Reset value of the SWPORTA_DDR register, which determines the direction (input/output) of the GPIO interface. 0: input, 1: output.
-io_gpio2_direction_rst_value 0

# io_gpio2_output_rst_value --- Reset value of the SWPORTA_DR register, which determines the reset value of the GPIO output ports. Bits corresponding to input ports are ignored.
-io_gpio2_output_rst_value 0x0


######## io_i2c_mst1 --- com.arc.hardware.dfss.io_i2c_mst1.1_0 ########

# Create io_i2c_mst1
-create com.arc.hardware.dfss.io_i2c_mst1.1_0 System.CPUisle.ARCv2EM.io_i2c_mst1

# io_i2c_mst1 --- Command line option for APEX extension component 'io_i2c_mst1'.
-io_i2c_mst1 true

# io_i2c_mst1_fs --- RX/TX FIFO size
-io_i2c_mst1_fs 16

# io_i2c_mst1_dma_support --- Specifies whether the DMA handshake interface is included
-io_i2c_mst1_dma_support None

# io_i2c_mst1_cdc_included --- Selects whether a clock-domain crossing (CDC) is included between the core clock and the serial clock. If no CDC is present, both clocks must be synchronous. Otherwise the core clock frequency may be higher than, lower than or equal to the serial clock frequency.
-io_i2c_mst1_cdc_included 0

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_i2c_mst2 --- com.arc.hardware.dfss.io_i2c_mst2.1_0 ########

# Create io_i2c_mst2
-create com.arc.hardware.dfss.io_i2c_mst2.1_0 System.CPUisle.ARCv2EM.io_i2c_mst2

# io_i2c_mst2 --- Command line option for APEX extension component 'io_i2c_mst2'.
-io_i2c_mst2 true

# io_i2c_mst2_fs --- RX/TX FIFO size
-io_i2c_mst2_fs 16

# io_i2c_mst2_dma_support --- Specifies whether the DMA handshake interface is included
-io_i2c_mst2_dma_support None

# io_i2c_mst2_cdc_included --- Selects whether a clock-domain crossing (CDC) is included between the core clock and the serial clock. If no CDC is present, both clocks must be synchronous. Otherwise the core clock frequency may be higher than, lower than or equal to the serial clock frequency.
-io_i2c_mst2_cdc_included 0

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_uart0 --- com.arc.hardware.dfss.io_uart0.1_0 ########

# Create io_uart0
-create com.arc.hardware.dfss.io_uart0.1_0 System.CPUisle.ARCv2EM.io_uart0

# io_uart0 --- Command line option for EIA extension component 'io_uart0'.
-io_uart0 true

# io_uart0_fifo_mode --- Set the UART FIFO mode
-io_uart0_fifo_mode 16

# io_uart0_dma_support --- Selects whether support for the ARC EM DMA is included and whether the handshake interface should be connected to a memory-based or to an Aux-based DMA channel.
-io_uart0_dma_support None

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_uart1 --- com.arc.hardware.dfss.io_uart1.1_0 ########

# Create io_uart1
-create com.arc.hardware.dfss.io_uart1.1_0 System.CPUisle.ARCv2EM.io_uart1

# io_uart1 --- Command line option for EIA extension component 'io_uart1'.
-io_uart1 true

# io_uart1_fifo_mode --- Set the UART FIFO mode
-io_uart1_fifo_mode 16

# io_uart1_dma_support --- Selects whether support for the ARC EM DMA is included and whether the handshake interface should be connected to a memory-based or to an Aux-based DMA channel.
-io_uart1_dma_support None

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_uart2 --- com.arc.hardware.dfss.io_uart2.1_0 ########

# Create io_uart2
-create com.arc.hardware.dfss.io_uart2.1_0 System.CPUisle.ARCv2EM.io_uart2

# io_uart2 --- Command line option for EIA extension component 'io_uart2'.
-io_uart2 true

# io_uart2_fifo_mode --- Set the UART FIFO mode
-io_uart2_fifo_mode 16

# io_uart2_dma_support --- Selects whether support for the ARC EM DMA is included and whether the handshake interface should be connected to a memory-based or to an Aux-based DMA channel.
-io_uart2_dma_support None

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_uart3 --- com.arc.hardware.dfss.io_uart3.1_0 ########

# Create io_uart3
-create com.arc.hardware.dfss.io_uart3.1_0 System.CPUisle.ARCv2EM.io_uart3

# io_uart3 --- Command line option for EIA extension component 'io_uart3'.
-io_uart3 true

# io_uart3_fifo_mode --- Set the UART FIFO mode
-io_uart3_fifo_mode 16

# io_uart3_dma_support --- Selects whether support for the ARC EM DMA is included and whether the handshake interface should be connected to a memory-based or to an Aux-based DMA channel.
-io_uart3_dma_support None

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_i2s_rx_mst0 --- com.arc.hardware.dfss.io_i2s_rx_mst0.1_0 ########

# Create io_i2s_rx_mst0
-create com.arc.hardware.dfss.io_i2s_rx_mst0.1_0 System.CPUisle.ARCv2EM.io_i2s_rx_mst0

# io_i2s_rx_mst0 --- Command line option for APEX extension component 'io_i2s_rx_mst0'.
-io_i2s_rx_mst0 true

# io_i2s_rx_mst0_fs --- RX FIFO size
-io_i2s_rx_mst0_fs 8

# io_i2s_rx_mst0_fw --- RX FIFO width
-io_i2s_rx_mst0_fw 16

# io_i2s_rx_mst0_dma_support --- Specifies whether the DMA handshake interface is included
-io_i2s_rx_mst0_dma_support Memory-Based

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_i2s_tx_mst0 --- com.arc.hardware.dfss.io_i2s_tx_mst0.1_0 ########

# Create io_i2s_tx_mst0
-create com.arc.hardware.dfss.io_i2s_tx_mst0.1_0 System.CPUisle.ARCv2EM.io_i2s_tx_mst0

# io_i2s_tx_mst0 --- Command line option for APEX extension component 'io_i2s_tx_mst0'.
-io_i2s_tx_mst0 true

# io_i2s_tx_mst0_fs --- TX FIFO size
-io_i2s_tx_mst0_fs 8

# io_i2s_tx_mst0_fw --- TX FIFO width
-io_i2s_tx_mst0_fw 16

# io_i2s_tx_mst0_dma_support --- Specifies whether the DMA handshake interface is included
-io_i2s_tx_mst0_dma_support Memory-Based

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## io_pdm_rx0 --- com.arc.hardware.dfss.io_pdm_rx0.1_0 ########

# Create io_pdm_rx0
-create com.arc.hardware.dfss.io_pdm_rx0.1_0 System.CPUisle.ARCv2EM.io_pdm_rx0

# io_pdm_rx0 --- Command line option for APEX extension component 'io_pdm_rx0'.
-io_pdm_rx0 true

# io_pdm_rx0_ch --- Number of Stereo Channels
-io_pdm_rx0_ch 1

# io_pdm_rx0_fs --- RX FIFO size
-io_pdm_rx0_fs 16

# io_pdm_rx0_ns --- Maximum number of CIC stages
-io_pdm_rx0_ns 4

# io_pdm_rx0_ds --- Maximum delay in the COMB filter of the CIC filter
-io_pdm_rx0_ds 2

# io_pdm_rx0_dma_support --- Specifies whether the DMA handshake interface is included
-io_pdm_rx0_dma_support Memory-Based

# assign_xpubit --- 
#       
# The User Mode Extension Enable register (XPU) controls user-mode access to extension instructions and state. Each extension group is assigned a bit within the XPU register, and this bit may be programmed to enable or disable user-mode access to the extensions within that group.
# <p>
# By default an extension is not assigned a bit in this register.  This means the extension is always available.
# <p>
# If you wish to assign an XPU bit number, select this option.
# 
# 
-assign_xpubit false

# xpubit --- 
# The XPU bit number for this extension.
# 
-xpubit 0


######## DCCM --- com.arc.hardware.DCCM.1_0 ########

# Create DCCM
-create com.arc.hardware.DCCM.1_0 System.CPUisle.ARCv2EM.DCCM

# dccm_size --- This defines the size of the Data Closely Coupled Memory (DCCM) in bytes
-dccm_size 131072

# dccm_base --- Sets the initial memory region assignment for DCCM
-dccm_base 8

# dccm_interleave --- Split DCCM into even/odd memory banks.
-dccm_interleave false

# dccm_prot --- Specifies the type of protection built for the DCCM.
-dccm_prot None

# dccm_prot_level --- Specifies the level protection.
-dccm_prot_level Data_Only

# dccm_prot_exceptions --- When the core is configured with ECC or Parity, cause exception generation hardware to be created for uncorrectable errors detected on the DCCM
-dccm_prot_exceptions true

# dccm_sec_lvl --- Specifies the level of secure DCCM.
-dccm_sec_lvl Non_Secure

# dccm_dmi --- This enables external access through a DMI (direct memory interface) port.
-dccm_dmi true


######## DMA Controller --- com.arc.hardware.DMA_Controller.1_0 ########

# Create DMA Controller
-create com.arc.hardware.DMA_Controller.1_0 "System.CPUisle.ARCv2EM.DMA Controller"

# dmac_channels --- This options specifies the number of DMA channels implemented in the DMA controller
-dmac_channels 16

# dmac_fifo_depth --- This option specifies the DMA transfer FIFO depth in 32b words.
-dmac_fifo_depth 2

# dmac_int_config --- None: the DMA controller cannot raise an interrupt
# Single-External: single done and single error interrupt signal for all DMA channels, and the interrupt signals are routed to a port at the top of the EM logical hierarchy
# Multiple-External: each DMA channel can be configured to raise separate (per-channel) done and error interrupts, and the interrupt signals are routed to ports at the top of the EM logical hierarchy
# Single-Internal: single done and single error interrupt signals for all DMA channels, and the interrupt signals are internal to the EM core
# Multiple-Internal: each DMA channel can be configured to raise separate (per-channel) done and error interrupts, and the interrupt signals are internal to the EM core
-dmac_int_config Multiple-Internal

# dmac_separate_error_interrupts --- This specifies whether there is a separate error interrupt per DMA channel, or just one.
-dmac_separate_error_interrupts false

# dmac_registers --- This option defines the number of DMA channels with their registers located in auxiliary space.
-dmac_registers 0

# dmac_mem_if --- This option specifies whether the DMA controller system memory interface is integrated into the existing EM system memory interfaces or has its own interface.
-dmac_mem_if integrated

# dmac_per_if --- Internal vs DW peripheral interface. Specify (in hex) which channels have the DW interface, where bit 0 corresponds to DMA channel 0, bit 1 for DMA channel 1, etc.
# Example: 4 channel DMA controller where -dmac_per_if is set to 0x9 = DMA Channels 0 and 3 configured with the DW req interface, DMA Channels 1 and 2 configured with the internal req interface.
-dmac_per_if 0x7e00


######## DSP --- com.arc.hardware.DSP.1_0 ########

# Create DSP
-create com.arc.hardware.DSP.1_0 System.CPUisle.ARCv2EM.DSP

# dsp_complex --- Enable/disable support for single cycle 16b+16b complex instructions and butterfly operations, else 2-cycle complex instructions only without butterfly support
-dsp_complex true

# dsp_itu --- Enable/disable support for ITU bit-accurate 1 bit fractional shift before accumulation, else 1-bit fractional shift result after accumulation only
-dsp_itu true

# dsp_divsqrt --- Enable/disable support for divide and square root operations: DIV(U), REM(U), SQRT
-dsp_divsqrt radix2

# dsp_accshift --- Select support for accumulator shift operations: no supported, limited shift support only or full shift support and convergent rounding
-dsp_accshift full

# dsp_impl --- The datapath components may be inferred from Verilog for better area or optimized using carry-save components for better timing
-dsp_impl optimized


######## Data Cache --- com.arc.hardware.Data_Cache.1_0 ########

# Create Data Cache
-create com.arc.hardware.Data_Cache.1_0 "System.CPUisle.ARCv2EM.Data Cache"

# dc_size --- This defines the total size of the Data Cache in bytes.
-dc_size 16384

# dc_ways --- This defines the number of cache ways.
-dc_ways 2

# dc_bsize --- This defines the cache line length in bytes.
-dc_bsize 32

# dc_feature_level --- Feature Level, indicates locking and debug feature level  00 = Basic cache, with no locking or debug features  01 = Lock and flush features supported  10 = Lock, flush and advanced debug features supported  11 = Reserved
-dc_feature_level 2

# dc_uncached_region --- Enable an uncached region defined by aux reg
-dc_uncached_region false

# dc_prot --- Specifies the type of protection built for DCACHE.
-dc_prot None

# dc_prot_level --- Specifies the level of protection.
-dc_prot_level Data_Only

# dc_prot_exceptions --- Builds exception generation hardware for uncorrectable (fatal) errors detected on DCACHE.
-dc_prot_exceptions true


######## Debug Interface --- com.arc.hardware.Debug_Interface.1_0 ########

# Create Debug Interface
-create com.arc.hardware.Debug_Interface.1_0 "System.CPUisle.ARCv2EM.Debug Interface"

# dbg_en_option --- Adds an enable pin to the existing debug interface
-dbg_en_option false

# secure_debug --- This enables secure debug feature
-secure_debug true

# scdbg_aux_unlk --- An internal demo module will be included when enable
-scdbg_aux_unlk false

# dbg_apb_option --- Adds an additional APB debug port alongside the BVCI one
-dbg_apb_option false


######## ICCM0 --- com.arc.hardware.ICCM0.1_0 ########

# Create ICCM0
-create com.arc.hardware.ICCM0.1_0 System.CPUisle.ARCv2EM.ICCM0

# iccm0_size --- This defines the size of ICCM0 in bytes.This ICCM has 0 wait states.
-iccm0_size 131072

# iccm0_base --- Sets the initial memory region assignment for ICCM0
-iccm0_base 6

# iccm0_wide --- Creates ICCM0 as 64b memory to reduce accesses.
-iccm0_wide false

# iccm0_prot --- Specifies the type of protection built for ICCM0.
-iccm0_prot None

# iccm0_prot_level --- Specifies the level of protection.
-iccm0_prot_level Data_Only

# iccm0_prot_exceptions --- When the core is configured with ECC or Parity, cause exception generation hardware to be created for uncorrectable errors detected on the ICCM0
-iccm0_prot_exceptions true

# iccm0_sec_lvl --- Specifies the level of secure ICCM0.
-iccm0_sec_lvl Non_Secure

# iccm0_dmi --- This enables external access through a DMI (direct memory interface) port.
-iccm0_dmi true


######## Instruction Cache --- com.arc.hardware.Instruction_Cache.1_0 ########

# Create Instruction Cache
-create com.arc.hardware.Instruction_Cache.1_0 "System.CPUisle.ARCv2EM.Instruction Cache"

# ic_size --- This defines the total size of the instruction cache in bytes.
-ic_size 16384

# ic_ways --- This defines the number of cache ways
-ic_ways 2

# ic_bsize --- This defines the cache line length in bytes.
-ic_bsize 64

# ic_disable_on_reset --- The instruction cache may be enabled immediately after reset, depending on this option.  If this option is enabled, the last cache operation is set to failed, and the direct cache-RAM access is enabled.  Furthermore, the instruction cache is invalidated  all cache lines are invalidated and unlocked, and the tag RAM is cleared.
-ic_disable_on_reset false

# ic_feature_level --- This defines the feature level of the cache.
-ic_feature_level 1

# ic_pwr_opt_level --- This selects power-optimization options in the micro-architecture of the instruction cache.
-ic_pwr_opt_level 0

# ic_prot --- Specifies the type of protection built for ICACHE.
-ic_prot None

# ic_prot_level --- Specifies the level of protection.
-ic_prot_level Data_Only

# ic_prot_exceptions --- Builds exception generation hardware for uncorrectable (fatal) errors detected on ICACHE.
-ic_prot_exceptions true


######## Interrupt Controller --- com.arc.hardware.Interrupt_Controller.1_0 ########

# Create Interrupt Controller
-create com.arc.hardware.Interrupt_Controller.1_0 "System.CPUisle.ARCv2EM.Interrupt Controller"

# number_of_interrupts --- This is the total number of interrupts available to the core.  Some interrupts are allocated statically to a specific interrupt line (for example, timer interrupts).  For more information on Interrupt and register-file options, see DesignWare ARCv2 ISA Programmers Reference Manual.
-number_of_interrupts 97

# number_of_levels --- Priority levels in the interrupt controller.
-number_of_levels 4

# external_interrupts --- This is the total number of interrupt pins available for external system components.  This parameter must be less than the total number of interrupts.
-external_interrupts 77

# firq_option --- This enables the fast-interrupts option, (priority level 0 interrupts), which uses an alternate register bank (if configured) instead of saving the context to memory.
-firq_option false


######## Performance Monitor --- com.arc.hardware.Performance_Monitor.1_0 ########

# Create Performance Monitor
-create com.arc.hardware.Performance_Monitor.1_0 "System.CPUisle.ARCv2EM.Performance Monitor"

# pct_counters --- Number of counters for performance monitoring.
-pct_counters 8


######## JTAG Interface --- com.arc.hardware.JTAG_Interface.1_0 ########

# Create JTAG Interface
-create com.arc.hardware.JTAG_Interface.1_0 "System.CPUisle.ARCv2EM.JTAG Interface"

######## Timer 0 --- com.arc.hardware.Timer_0.1_0 ########

# Create Timer 0
-create com.arc.hardware.Timer_0.1_0 "System.CPUisle.ARCv2EM.Timer 0"

# timer_0_int_level --- This sets the interrupt level (and implicitly the priority: level 0 is highest) of timer 0.
-timer_0_int_level 1


######## Watchdog Timer --- com.arc.hardware.Watchdog_Timer.1_0 ########

# Create Watchdog Timer
-create com.arc.hardware.Watchdog_Timer.1_0 "System.CPUisle.ARCv2EM.Watchdog Timer"

# watchdog_size --- Specifies the bit width of timer's internal counter.
-watchdog_size 32

# watchdog_clk --- Specifies whether the timer should be driven from a separate clock.
-watchdog_clk false


######## Real-time Counter --- com.arc.hardware.Real_time_Counter.1_0 ########

# Create Real-time Counter
-create com.arc.hardware.Real_time_Counter.1_0 "System.CPUisle.ARCv2EM.Real-time Counter"

######## SmaRT --- com.arc.hardware.SmaRT.1_0 ########

# Create SmaRT
-create com.arc.hardware.SmaRT.1_0 System.CPUisle.ARCv2EM.SmaRT

# smart_stack_entries --- This specifies the number of entries in the trace buffer.
-smart_stack_entries 8

# smart_implementation --- Flip-flop = FF-based design.  Memory = memory-based design (provides better density for larger trace buffers).
-smart_implementation flip-flop


######## Secure pipeline features --- com.arc.hardware.Secure_pipeline_features.1_0 ########

# Create Secure pipeline features
-create com.arc.hardware.Secure_pipeline_features.1_0 "System.CPUisle.ARCv2EM.Secure pipeline features"

# sec_scramble --- Enable insertion of scrambling modules on the address & data lines for embedded SRAMs and external memory interfaces. The gate count number in System/Gate Count tab does not include user defined logic. 
-sec_scramble false

# sec_encrypt_i --- Add support for user defined instruction encryption. The gate count number in System/Gate Count tab does not include user defined logic. 
-sec_encrypt_i false

# sec_encrypt_d --- Add support for user defined data encryption. The gate count number in System/Gate Count tab does not include user defined logic. 
-sec_encrypt_d false

# err_prot_option --- Select the ECC mode for CCM/Cache ECC protection: false: detect & correct or true: detect & fail
-err_prot_option true

# pipe_prot_option --- Select to enable PC & Register File error protection
-pipe_prot_option false

# sec_modes_option --- Enable secure shield 2+2 mode
-sec_modes_option true

# sec_region_crypt --- If MPU is present, use region-based encryption user logic for CCT demo
-sec_region_crypt false


######## Secure Timer 0 --- com.arc.hardware.Secure_Timer_0.1_0 ########

# Create Secure Timer 0
-create com.arc.hardware.Secure_Timer_0.1_0 "System.CPUisle.ARCv2EM.Secure Timer 0"

# stimer_0_int_level --- This sets the interrupt level (and implicitly the priority: level 0 is highest) of secure timer 0.
-stimer_0_int_level 1


######## Actionpoints --- com.arc.hardware.Actionpoints.1_0 ########

# Create Actionpoints
-create com.arc.hardware.Actionpoints.1_0 System.CPUisle.ARCv2EM.Actionpoints

# num_actionpoints --- This is the number of trigger events available.
-num_actionpoints 8

# aps_feature --- Selects Actionpoint feature set
-aps_feature min


######## Floating-point unit --- com.arc.hardware.Floating_point_unit.1_0 ########

# Create Floating-point unit
-create com.arc.hardware.Floating_point_unit.1_0 "System.CPUisle.ARCv2EM.Floating-point unit"

# fpu_dp_assist --- This enables double-precision acceleration instructions.
-fpu_dp_assist true

# fpu_fma_option --- This enables the fused multiply-add & multiply-subtract instructions.
-fpu_fma_option true

# fpu_mas_cycles --- Make mul/add/sub multicycle to achieve a higher clock speed.
-fpu_mas_cycles 2

# fpu_pipe_impl --- FPU pipelined implementation
-fpu_pipe_impl true

# fpu_div_option --- This enables divide & square-root acceleration
-fpu_div_option true

# fpu_div_cycles --- Controls div/sqrt implementation.
-fpu_div_cycles 17


######## Memory Protection Unit --- com.arc.hardware.Memory_Protection_Unit.1_0 ########

# Create Memory Protection Unit
-create com.arc.hardware.Memory_Protection_Unit.1_0 "System.CPUisle.ARCv2EM.Memory Protection Unit"

# mpu_num_regions --- Number of configured memory regions.
-mpu_num_regions 16

# mpu_32b --- Set the minimal region size to be 32 byte instead of 2KB.
-mpu_32b false

# mpu_sid_option --- It will enable SID support in Secure Shield
-mpu_sid_option true


######## Real-time trace producer --- com.arc.hardware.Real_time_trace_producer.1_0 ########

# Create Real-time trace producer
-create com.arc.hardware.Real_time_trace_producer.1_0 "System.CPUisle.ARCv2EM.Real-time trace producer"

# rtt_feature_level --- 'small' means that program trace only is available.  `medium' adds data trace.  `full' adds core and aux register trace.
-rtt_feature_level full


######## ARCv2EM CCT --- cct.1_0 ########

# Create ARCv2EM CCT
-create cct.1_0 "System.ARCv2EM CCT"

# cct --- 
# 	Option used to add a CCT to the design for command-line builds
# 	Without this architect can't add this component to a build
# 	via a cmdline -create command.  
# 	with old scripts.
# 	
-cct true

# no_hostlink --- 
# This prevents the inclusion of the hostlink library when compiling
# C or C++ programs.  The resultant executable, if it contains printfs,
# will print to an internal fixed buffer __mwwrite_buf.  
# Other hostlink operations that require debugger assistance, such as file
# opens, will fail.
# 
# Hostlink references incur memory cycles at unpredictable times and 
# so can perturb cycle-timing results.  Without hostlink,
# the debugger will not in any way interfere with the target while it is running.  
# Therefore this option is useful for simulation in which you want precisely the
# same cycle timing to occur each time you run, or for accurate power consumption results.
# 	
-cct_no_hostlink false

# has_subsystem_cct_flow --- 
# The above option will check for the presence of subsystem component in the build configuration and suitably modifies the Makefile for the sub-system environment.
# 	
-has_subsystem_cct_flow false


######## BusFabric --- com.arc.hardware.ARCv2MSS.BusFabric.1_0 ########

# Create BusFabric
-create com.arc.hardware.ARCv2MSS.BusFabric.1_0 System.BusFabric

######## ClkCtrl --- com.arc.hardware.ARCv2MSS.ClkCtrl.1_0 ########

# Create ClkCtrl
-create com.arc.hardware.ARCv2MSS.ClkCtrl.1_0 System.ClkCtrl

######## DSP Software --- com.arc.software.dfss.sw_dsp.1_0 ########

# Create DSP Software
-create com.arc.software.dfss.sw_dsp.1_0 "System.DSP Software"

# sw_dsp --- Command line option for Software element 'DSP Software'
-sw_dsp true


######## EMSDP_BOARD --- com.arc.hardware.ARCv2MSS.EMSDP_BOARD.1_0 ########

# Create EMSDP_BOARD
-create com.arc.hardware.ARCv2MSS.EMSDP_BOARD.1_0 System.EMSDP_BOARD

# emsdp_sys_freq --- Select the core frequency.
-emsdp_sys_freq 50


######## IO Software --- com.arc.software.dfss.sw_io.1_0 ########

# Create IO Software
-create com.arc.software.dfss.sw_io.1_0 "System.IO Software"

# sw_io --- Command line option for Software element 'IO Software'
-sw_io true


######## Implementation --- com.arc.hardware.implementation.1_0 ########

# Create Implementation
-create com.arc.hardware.implementation.1_0 System.Implementation

# ClockSpeed --- Target clock speed of the system
-clock_speed 10

# DDR2_clk_Ratio --- DDR2 Clock Vs System Clock Ratio
# 2x
# 3x
# 4x
-ddr2_clk_ratio 3x

# ClockSkew --- The clock skew for the system
-clock_skew 0.2

# HoldMargin --- Margin for hold time checks
-hold_margin 0.05

# Floorplan --- Floorplan definition for relative placement of  RAMs (at CPU-level) or the placement of the rams and CPU hard cores (at multicore level)
-floorplan em4_sensor

# JTAGFrequency --- Select the frequency of the JTAG clock Tck (in MHz).
# 
# The JTAG clock speed has to be less than 1/2 of the cpu clock otherwise the signals on the BVCI interface are not guaranteed to be valid.
# 
# NOTE: The RTL simulations will work when the JTAG clock frequency is set to half the CPU clock, however this may not be the case when simulating at gate level due to delays on the IO pads.
# 
# The default is set to 10 MHz so that there is no conflict when simulating with an ARCangel3 at 30MHz. (30 > 10*2)
# 
# The speed of simulation can be greatly increased by using a faster JTAG clock, but a dependency will warn if it exceeds 1/2 of the cpu clock.
# 
-jtag_tclk 4

# execution_trace_level --- 
# This traces committed instructions as they execute, and gathers statistics
# visible in the debugger for counting instructions & cycle delays.
# At the "stats" level ony the statistics are gathered and no trace is printed.
# "file" is equivalent to "full", but the results go to a trace .txt file instead.
# 
-execution_trace_level stats

# tb_trace --- 
# Enable instruction execution trace.
# This is available to arc_dev licensees (internal developers) only.
# 
-tb_trace false

# zero_based_arcnum --- 
# In a multicore build, number ARCs from 0.
# If this is not selected, arcs are numbered from 1.
# (This provides the initial value to the arcnum signal.)
# 
-zero_based_arcnum true

# generate_ipxact --- 
# Generate ipxact.xml file describing the CPUisle or archipelago frontier
# 
-generate_ipxact false

# ipxact_relative_path_names --- 
# Use relative path names for Verilog files in the ipxact.
# Otherwise, absolute path names are used.
# 
-ipxact_relative_path_names true

# optional_encryption --- 
# When selected, encrypted RTL output is generated.
# 	
-optional_encryption false

# ignore_encrypt_license --- 
# When selected, pretend the encryption license is missing.  For testing.
# 	
-ignore_encrypt_license false

# ignore_clear_license --- 
# When selected, pretend the cleartest license is missing.  For testing.
# 	
-ignore_clear_license false

# OPTION_require_archipelago --- 
# When selected, force use of archipelago.  This is for testing purposes.
# 	
-require_archipelago false


######## Infrastructure Software --- com.arc.software.dfss.sw_infra.1_0 ########

# Create Infrastructure Software
-create com.arc.software.dfss.sw_infra.1_0 "System.Infrastructure Software"

# sw_infra --- Command line option for Software element 'Infrastructure Software'
-sw_infra true

# templateName --- Template name
-template_name siss_combo_sensor_dsp


######## subsys_infra --- com.arc.hardware.dfss.subsys_infra.1_0 ########

# Create subsys_infra
-create com.arc.hardware.dfss.subsys_infra.1_0 System.subsys_infra

# subsys_infra --- Command line option for EIA glue logic.
-subsys_infra true

# internal_interrupt --- Connect the IO interrupts internally
-internal_interrupt true

# internal_dma_handshake --- Connect the DMA handshake signals internally
-internal_dma_handshake true

# spi_tb_sw_test_mode --- 
# This is a secret option, not seen by customers.
# If you check this, the SPI peripheral's testbenches will be set to SW test mode:
# The serial interface of the first SPI master io_spi_mstN peripheral is connected to all SPI slave peripherals io_spi_slvN.
# This is used for testing the SW drivers.
# 	
-spi_tb_sw_test_mode false

# i3c_tb_sw_test_mode --- 
# This is a secret option, not seen by customers.
# If you check this, the I3C peripheral's testbenches will be set to SW test mode:
# The serial interface of the io_i3cN peripheral is connected to the I2C slave peripherals io_i2c_slv0.
# This is used for testing the SW drivers.
# 	
-i3c_tb_sw_test_mode false

# subsys_apex_offset --- Subsystem APEX address offset in the AUX address space. The aperture used by the subsystem is fixed to 0x0010_0000. In general, the APEX address offset must be in the range from 0x0010_0000 to 0xFFF0_0000. However, if your design includes the "UAUX Interface" component, then the APEX address offset must be in the range from 0x0010_0000 to 0x7FF0_0000 to avoid address conflicts with any UAUX components.
-subsys_apex_offset 0x8000_0000

# subsys_uaux_offset --- Subsystem UAUX address offset in the UAUX address space. The UAUX address offset must be an integer multiple of 0x0010_0000 in the range from 0x0000_0000 to 0x7FF0_0000. The aperture reserved for the subsystem is fixed to 0x0010_0000.
-subsys_uaux_offset 0x10_0000


######## ARC_RTT --- com.arc.hardware.ARC_RTT.1_0 ########

# Create ARC_RTT
-create com.arc.hardware.ARC_RTT.1_0 System.ARC_RTT

# has_nexus_if --- Please select Nexus interface to offload the data from RTT 
-has_nexus_if true

# has_on_chip_mem --- Please select the on-chip memory option to store the trace data in shared memory 
-has_on_chip_mem true

# nexus_data_wdt --- Please select the Nexus Data Width to offload the data from RTT 
-nexus_data_wdt 16

# internal_memory_size --- Please select internal memory size to capture the trace data 
-internal_memory_size 16k

# ram_type --- Please select Types of internal memories to be inferred for the logic 
-ram_type 1_PORT

# power_domains --- Adds isolation signal inputs/power switch controls for use in UPF flow when configuring power domains.
-rtt_power_domains false


######## Tool Configuration --- cgen.1_0 ########

# Create Tool Configuration
-create cgen.1_0 "System.Tool Configuration"

# mwdt_version --- Selects the MetaWare version to be used with the TCF file.
# Change from the default to an older or newer toolset version if you want the TCF file to be used with an older or newer version of the MetaWare tools.
-mwdt_version O-2018.09

# code_base_addr --- 
# The base address to assign to the executable code segment in the linker command file when there is no ICCM in the build.  This value is ignored when there is an ICCM.
# 
-code_base_addr 0x0

# data_base_addr --- 
# The base address to assign to the data segment in the linker command file when the data is not being mapped to a DCCM.  This value is ignored when the data segment is mapped to a DCCM, as in that case the base address of the DCCM memory is used.
# 
# A value of 0xffffffff means that the data segment will not be mapped to any specific address.
# 
-data_base_addr 0xffff_ffff

# underscores_in_numbers --- Use underscores in hex numbers to improve readability.
-underscores_in_numbers false

# tcf_rebrand --- Alternate branding of TCF (not used)
-rebrand false


]]></string>
  </configuration>
  <configuration name="assembler_defines" filename="core_config.s">
    <string><![CDATA[
.ifndef __core_config_s
	.define __core_config_s, 1
	.define _TOOL_CONFIG_VER, 10072
	.define	core_config_cir_identity,0x00000044
	.define	core_config_cir_identity_chipid,0
	.define	core_config_cir_identity_arcnum,0
	.define	core_config_cir_identity_arcver,68
	.define	core_config_cir_identity_family,4
	.define	core_config_cir_identity_corever,4
	.define	core_config_cir_aux_dccm,0x80000000
	.define	core_config_bcr_bcr_ver,0x00000002
	.define	core_config_bcr_bcr_ver_version,2
	.define	core_config_bcr_vecbase_ac_build,0x00000410
	.define	core_config_bcr_vecbase_ac_build_version,4
	.define	core_config_bcr_vecbase_ac_build_vector_config,0
	.define	core_config_bcr_vecbase_ac_build_addr,1
	.define	core_config_bcr_mpu_build,0x00031004
	.define	core_config_bcr_mpu_build_i,1
	.define	core_config_bcr_mpu_build_s,1
	.define	core_config_bcr_mpu_build_regions,16
	.define	core_config_bcr_mpu_build_version,4
	.define	core_config_bcr_rf_build,0x00000002
	.define	core_config_bcr_rf_build_version,2
	.define	core_config_bcr_rf_build_p,0
	.define	core_config_bcr_rf_build_e,0
	.define	core_config_bcr_rf_build_r,0
	.define	core_config_bcr_rf_build_b,0
	.define	core_config_bcr_rf_build_d,0
	.define	core_config_bcr_sec_vecbase_build,0x00000001
	.define	core_config_bcr_sec_vecbase_build_addr,0
	.define	core_config_bcr_sec_vecbase_build_vector_config,0
	.define	core_config_bcr_sec_vecbase_build_version,1
	.define	core_config_bcr_d_cache_build,0x00215105
	.define	core_config_bcr_d_cache_build_version,5
	.define	core_config_bcr_d_cache_build_assoc,1
	.define	core_config_bcr_d_cache_build_capacity,5
	.define	core_config_bcr_d_cache_build_bsize,1
	.define	core_config_bcr_d_cache_build_fl,2
	.define	core_config_bcr_d_cache_build_ioc,0
	.define	core_config_bcr_d_cache_build_cp,0
	.define	core_config_bcr_d_cache_build_u,0
	.define	core_config_bcr_d_cache_build_cycles,0
	.define	core_config_bcr_dccm_build,0x00000905
	.define	core_config_bcr_dccm_build_w,0
	.define	core_config_bcr_dccm_build_cycles,0
	.define	core_config_bcr_dccm_build_interleave,0
	.define	core_config_bcr_dccm_build_size1,0
	.define	core_config_bcr_dccm_build_size0,9
	.define	core_config_bcr_dccm_build_version,5
	.define	core_config_bcr_timer_build,0x01010d05
	.define	core_config_bcr_timer_build_sp1,0
	.define	core_config_bcr_timer_build_sp0,1
	.define	core_config_bcr_timer_build_p1,0
	.define	core_config_bcr_timer_build_p0,1
	.define	core_config_bcr_timer_build_st1,0
	.define	core_config_bcr_timer_build_st0,1
	.define	core_config_bcr_timer_build_rtc,1
	.define	core_config_bcr_timer_build_rtsc_ver,1
	.define	core_config_bcr_timer_build_rtsc,1
	.define	core_config_bcr_timer_build_t0,1
	.define	core_config_bcr_timer_build_t1,0
	.define	core_config_bcr_timer_build_version,5
	.define	core_config_bcr_ap_build,0x00000605
	.define	core_config_bcr_ap_build_version,5
	.define	core_config_bcr_ap_build_type,6
	.define	core_config_bcr_i_cache_build,0x00135105
	.define	core_config_bcr_i_cache_build_assoc,1
	.define	core_config_bcr_i_cache_build_version,5
	.define	core_config_bcr_i_cache_build_capacity,5
	.define	core_config_bcr_i_cache_build_bsize,3
	.define	core_config_bcr_i_cache_build_fl,1
	.define	core_config_bcr_i_cache_build_d,0
	.define	core_config_bcr_iccm_build,0x00000905
	.define	core_config_bcr_iccm_build_w0,0
	.define	core_config_bcr_iccm_build_iccm1_size1,0
	.define	core_config_bcr_iccm_build_iccm0_size1,0
	.define	core_config_bcr_iccm_build_iccm1_size0,0
	.define	core_config_bcr_iccm_build_iccm0_size0,9
	.define	core_config_bcr_iccm_build_version,5
	.define	core_config_bcr_dsp_build,0x00003521
	.define	core_config_bcr_dsp_build_wide,0
	.define	core_config_bcr_dsp_build_itu_pa,1
	.define	core_config_bcr_dsp_build_acc_shift,2
	.define	core_config_bcr_dsp_build_comp,1
	.define	core_config_bcr_dsp_build_divsqrt,1
	.define	core_config_bcr_dsp_build_version,33
	.define	core_config_bcr_multiply_build,0x00022206
	.define	core_config_bcr_multiply_build_version16x16,2
	.define	core_config_bcr_multiply_build_dsp,2
	.define	core_config_bcr_multiply_build_cyc,0
	.define	core_config_bcr_multiply_build_type,2
	.define	core_config_bcr_multiply_build_version32x32,6
	.define	core_config_bcr_swap_build,0x00000003
	.define	core_config_bcr_swap_build_version,3
	.define	core_config_bcr_norm_build,0x00000003
	.define	core_config_bcr_norm_build_version,3
	.define	core_config_bcr_minmax_build,0x00000002
	.define	core_config_bcr_minmax_build_version,2
	.define	core_config_bcr_barrel_build,0x00000303
	.define	core_config_bcr_barrel_build_version,3
	.define	core_config_bcr_barrel_build_shift_option,3
	.define	core_config_bcr_isa_config,0x12047402
	.define	core_config_bcr_isa_config_res1,0
	.define	core_config_bcr_isa_config_d,1
	.define	core_config_bcr_isa_config_res2,0
	.define	core_config_bcr_isa_config_f,0
	.define	core_config_bcr_isa_config_c,2
	.define	core_config_bcr_isa_config_l,0
	.define	core_config_bcr_isa_config_n,0
	.define	core_config_bcr_isa_config_a,0
	.define	core_config_bcr_isa_config_b,0
	.define	core_config_bcr_isa_config_addr_size,4
	.define	core_config_bcr_isa_config_lpc_size,7
	.define	core_config_bcr_isa_config_pc_size,4
	.define	core_config_bcr_isa_config_version,2
	.define	core_config_bcr_dmp_pp_build,0xf0000012
	.define	core_config_bcr_stack_region_build,0x00000002
	.define	core_config_bcr_erp_build,0x50000004
	.define	core_config_bcr_erp_build_l,0
	.define	core_config_bcr_erp_build_wd,2
	.define	core_config_bcr_erp_build_c,1
	.define	core_config_bcr_erp_build_mmu,0
	.define	core_config_bcr_erp_build_rf,0
	.define	core_config_bcr_erp_build_pc,0
	.define	core_config_bcr_erp_build_ic,0
	.define	core_config_bcr_erp_build_dc,0
	.define	core_config_bcr_erp_build_ip,0
	.define	core_config_bcr_erp_build_dp,0
	.define	core_config_bcr_erp_build_version,4
	.define	core_config_bcr_fpu_build,0x01004f03
	.define	core_config_bcr_fpu_build_da,1
	.define	core_config_bcr_fpu_build_dd,0
	.define	core_config_bcr_fpu_build_dc,0
	.define	core_config_bcr_fpu_build_df,0
	.define	core_config_bcr_fpu_build_dp,0
	.define	core_config_bcr_fpu_build_fd_v1,2
	.define	core_config_bcr_fpu_build_pi,1
	.define	core_config_bcr_fpu_build_fd,0
	.define	core_config_bcr_fpu_build_fm,0
	.define	core_config_bcr_fpu_build_sd,1
	.define	core_config_bcr_fpu_build_sc,1
	.define	core_config_bcr_fpu_build_sf,1
	.define	core_config_bcr_fpu_build_sp,1
	.define	core_config_bcr_fpu_build_version,3
	.define	core_config_bcr_dmac_build,0x00120f02
	.define	core_config_bcr_dmac_build_int_cfg,2
	.define	core_config_bcr_dmac_build_fifo,1
	.define	core_config_bcr_dmac_build_chan_mem,0
	.define	core_config_bcr_dmac_build_channels,15
	.define	core_config_bcr_dmac_build_version,2
	.define	core_config_bcr_sec_build,0x00001005
	.define	core_config_bcr_sec_build_p,0
	.define	core_config_bcr_sec_build_c,0
	.define	core_config_bcr_sec_build_rpm,0
	.define	core_config_bcr_sec_build_ceb,0
	.define	core_config_bcr_sec_build_cem,0
	.define	core_config_bcr_sec_build_ut,0
	.define	core_config_bcr_sec_build_rpo,0
	.define	core_config_bcr_sec_build_rds,0
	.define	core_config_bcr_sec_build_ris,0
	.define	core_config_bcr_sec_build_dsm,0
	.define	core_config_bcr_sec_build_nsm,0
	.define	core_config_bcr_sec_build_i1sm,0
	.define	core_config_bcr_sec_build_i0sm,0
	.define	core_config_bcr_sec_build_s,1
	.define	core_config_bcr_sec_build_ei,0
	.define	core_config_bcr_sec_build_ed,0
	.define	core_config_bcr_sec_build_version,5
	.define	core_config_bcr_subsys_build,0x00101063
	.define	core_config_bcr_subsys_build_version_major,0
	.define	core_config_bcr_subsys_build_version_minor,2
	.define	core_config_bcr_subsys_build_version_build,6
	.define	core_config_bcr_subsys_build_type,3
	.define	core_config_bcr_core_config,0x00000101
	.define	core_config_bcr_core_config_turbo_boost,1
	.define	core_config_bcr_core_config_version,1
	.define	core_config_bcr_rtt_build,0x00000503
	.define	core_config_bcr_rtt_build_prod_src_num,0
	.define	core_config_bcr_rtt_build_fl,2
	.define	core_config_bcr_rtt_build_pi,1
	.define	core_config_bcr_rtt_build_version,3
	.define	core_config_bcr_irq_build,0x034d6101
	.define	core_config_bcr_irq_build_raz,0
	.define	core_config_bcr_irq_build_nmi,0
	.define	core_config_bcr_irq_build_f,0
	.define	core_config_bcr_irq_build_p,3
	.define	core_config_bcr_irq_build_exts,77
	.define	core_config_bcr_irq_build_irqs,97
	.define	core_config_bcr_irq_build_version,1
	.define	core_config_bcr_pct_build,0x08080104
	.define	core_config_bcr_pct_build_version,4
	.define	core_config_bcr_pct_build_s,1
	.define	core_config_bcr_pct_build_i,0
	.define	core_config_bcr_pct_build_c,8
	.define	core_config_bcr_cc_build,0x006f0004
	.define	core_config_bcr_cc_build_version,4
	.define	core_config_bcr_cc_build_cc,111
	.define	core_config_bcr_smart_build,0x00002003
	.define	core_config_bcr_smart_build_version,3
	.define	core_config_bcr_smart_build_stack_size,8
	.define	core_config_cir_aux_iccm,0x60000000
	.define	core_config_cir_subsys_dsp_0_build,0x00001000
	.define	core_config_cir_subsys_io_0_build,0x171700f0
	.define	core_config_cir_subsys_io_1_build,0x00000007
	.define	core_config_cir_subsys_io_2_build,0x00000111
	.define	core_config_cir_subsys_uaux_offset,0x00100000
	.define	core_config_cir_subsys_apex_offset,0x80000000
	.define	core_config_family,4
	.define	core_config_core_version,4
	.define	core_config_family_name,"arcv2em"
	.define	core_config_rgf_num_banks,1
	.define	core_config_rgf_num_wr_ports,1
	.define	core_config_endian,"little"
	.define	core_config_endian_little,1
	.define	core_config_endian_big,0
	.define	core_config_lpc_size,32
	.define	core_config_pc_size,32
	.define	core_config_addr_size,32
	.define	core_config_code_density,1
	.define	core_config_div_rem,"radix2"
	.define	core_config_div_rem_radix2,1
	.define	core_config_turbo_boost,1
	.define	core_config_swap,1
	.define	core_config_bitscan,1
	.define	core_config_mpy_option,"mpyd"
	.define	core_config_mpy_option_num,8
	.define	core_config_shift_assist,1
	.define	core_config_barrel_shifter,1
	.define	core_config_dsp,1
	.define	core_config_dsp2,1
	.define	core_config_dsp_complex,1
	.define	core_config_dsp_divsqrt,"radix2"
	.define	core_config_dsp_divsqrt_radix2,1
	.define	core_config_dsp_itu,1
	.define	core_config_dsp_accshift,"full"
	.define	core_config_dsp_accshift_full,1
	.define	core_config_fpus_div,1
	.define	core_config_fpu_mac,1
	.define	core_config_fpuda,1
	.define	core_config_fpus_mpy_slow,1
	.define	core_config_fpus_div_slow,1
	.define	core_config_fpu_pipe_impl,1
	.define	core_config_timer0,1
	.define	core_config_timer0_level,1
	.define	core_config_timer0_vector,16
	.define	core_config_sec_timer0,1
	.define	core_config_sec_timer0_level,1
	.define	core_config_sec_timer0_vector,20
	.define	core_config_rtc,1
	.define	core_config_action_points,8
	.define	core_config_stack_check,1
	.define	core_config_smart_stack_entries,8
	.define	core_config_mpu_present,1
	.define	core_config_mpuv4,1
	.define	core_config_mpu_sid,1
	.define	core_config_mpu_regions,16
	.define	core_config_interrupts_present,1
	.define	core_config_interrupts_number,97
	.define	core_config_interrupts_priorities,4
	.define	core_config_interrupts_externals,77
	.define	core_config_interrupts,97
	.define	core_config_interrupt_priorities,4
	.define	core_config_ext_interrupts,77
	.define	core_config_interrupts_base,0x400
	.define	core_config_interrupts_sec_base,0x0
	.define	core_config_dcache_present,1
	.define	core_config_dcache_size,16384
	.define	core_config_dcache_line_size,32
	.define	core_config_dcache_ways,2
	.define	core_config_dcache_feature,2
	.define	core_config_icache_present,1
	.define	core_config_icache_size,16384
	.define	core_config_icache_line_size,64
	.define	core_config_icache_ways,2
	.define	core_config_icache_feature,1
	.define	core_config_dccm_present,1
	.define	core_config_dccm_size,0x20000
	.define	core_config_dccm_base,0x80000000
	.define	core_config_iccm_present,1
	.define	core_config_iccm0_present,1
	.define	core_config_iccm_size,0x20000
	.define	core_config_iccm0_size,0x20000
	.define	core_config_iccm_base,0x60000000
	.define	core_config_iccm0_base,0x60000000
	.define	core_config_esp_encrypt,1
	.define	core_config_sec_modes,1
	.define	core_config_iccm0_sec_lvl,"NS"
	.define	core_config_dccm_sec_lvl,"NS"
	.define	core_config_error_prot_ver,4
	.define	core_config_ccm_prot_pipelined,1
	.define	core_config_watchdog,1
	.define	core_config_watchdog_size,32
	.define	core_config_pct_counters,8
	.define	core_config_dmac,1
	.define	core_config_dmac_channels,16
	.define	core_config_dmac_registers,0
	.define	core_config_dmac_fifo_depth,2
	.define	core_config_dmac_int_config,"multiple_internal"
	.define	core_config_clock_speed,10
.endif ; __core_config_s

]]></string>
  </configuration>
  <configuration name="C_defines" filename="core_config.h">
    <string><![CDATA[
#ifndef __core_config_h
	#define __core_config_h  1
	#define _TOOL_CONFIG_VER 10072
	#define	core_config_cir_identity	0x00000044
	#define	core_config_cir_identity_chipid	0
	#define	core_config_cir_identity_arcnum	0
	#define	core_config_cir_identity_arcver	68
	#define	core_config_cir_identity_family	4
	#define	core_config_cir_identity_corever	4
	#define	core_config_cir_aux_dccm	0x80000000
	#define	core_config_bcr_bcr_ver	0x00000002
	#define	core_config_bcr_bcr_ver_version	2
	#define	core_config_bcr_vecbase_ac_build	0x00000410
	#define	core_config_bcr_vecbase_ac_build_version	4
	#define	core_config_bcr_vecbase_ac_build_vector_config	0
	#define	core_config_bcr_vecbase_ac_build_addr	1
	#define	core_config_bcr_mpu_build	0x00031004
	#define	core_config_bcr_mpu_build_i	1
	#define	core_config_bcr_mpu_build_s	1
	#define	core_config_bcr_mpu_build_regions	16
	#define	core_config_bcr_mpu_build_version	4
	#define	core_config_bcr_rf_build	0x00000002
	#define	core_config_bcr_rf_build_version	2
	#define	core_config_bcr_rf_build_p	0
	#define	core_config_bcr_rf_build_e	0
	#define	core_config_bcr_rf_build_r	0
	#define	core_config_bcr_rf_build_b	0
	#define	core_config_bcr_rf_build_d	0
	#define	core_config_bcr_sec_vecbase_build	0x00000001
	#define	core_config_bcr_sec_vecbase_build_addr	0
	#define	core_config_bcr_sec_vecbase_build_vector_config	0
	#define	core_config_bcr_sec_vecbase_build_version	1
	#define	core_config_bcr_d_cache_build	0x00215105
	#define	core_config_bcr_d_cache_build_version	5
	#define	core_config_bcr_d_cache_build_assoc	1
	#define	core_config_bcr_d_cache_build_capacity	5
	#define	core_config_bcr_d_cache_build_bsize	1
	#define	core_config_bcr_d_cache_build_fl	2
	#define	core_config_bcr_d_cache_build_ioc	0
	#define	core_config_bcr_d_cache_build_cp	0
	#define	core_config_bcr_d_cache_build_u	0
	#define	core_config_bcr_d_cache_build_cycles	0
	#define	core_config_bcr_dccm_build	0x00000905
	#define	core_config_bcr_dccm_build_w	0
	#define	core_config_bcr_dccm_build_cycles	0
	#define	core_config_bcr_dccm_build_interleave	0
	#define	core_config_bcr_dccm_build_size1	0
	#define	core_config_bcr_dccm_build_size0	9
	#define	core_config_bcr_dccm_build_version	5
	#define	core_config_bcr_timer_build	0x01010d05
	#define	core_config_bcr_timer_build_sp1	0
	#define	core_config_bcr_timer_build_sp0	1
	#define	core_config_bcr_timer_build_p1	0
	#define	core_config_bcr_timer_build_p0	1
	#define	core_config_bcr_timer_build_st1	0
	#define	core_config_bcr_timer_build_st0	1
	#define	core_config_bcr_timer_build_rtc	1
	#define	core_config_bcr_timer_build_rtsc_ver	1
	#define	core_config_bcr_timer_build_rtsc	1
	#define	core_config_bcr_timer_build_t0	1
	#define	core_config_bcr_timer_build_t1	0
	#define	core_config_bcr_timer_build_version	5
	#define	core_config_bcr_ap_build	0x00000605
	#define	core_config_bcr_ap_build_version	5
	#define	core_config_bcr_ap_build_type	6
	#define	core_config_bcr_i_cache_build	0x00135105
	#define	core_config_bcr_i_cache_build_assoc	1
	#define	core_config_bcr_i_cache_build_version	5
	#define	core_config_bcr_i_cache_build_capacity	5
	#define	core_config_bcr_i_cache_build_bsize	3
	#define	core_config_bcr_i_cache_build_fl	1
	#define	core_config_bcr_i_cache_build_d	0
	#define	core_config_bcr_iccm_build	0x00000905
	#define	core_config_bcr_iccm_build_w0	0
	#define	core_config_bcr_iccm_build_iccm1_size1	0
	#define	core_config_bcr_iccm_build_iccm0_size1	0
	#define	core_config_bcr_iccm_build_iccm1_size0	0
	#define	core_config_bcr_iccm_build_iccm0_size0	9
	#define	core_config_bcr_iccm_build_version	5
	#define	core_config_bcr_dsp_build	0x00003521
	#define	core_config_bcr_dsp_build_wide	0
	#define	core_config_bcr_dsp_build_itu_pa	1
	#define	core_config_bcr_dsp_build_acc_shift	2
	#define	core_config_bcr_dsp_build_comp	1
	#define	core_config_bcr_dsp_build_divsqrt	1
	#define	core_config_bcr_dsp_build_version	33
	#define	core_config_bcr_multiply_build	0x00022206
	#define	core_config_bcr_multiply_build_version16x16	2
	#define	core_config_bcr_multiply_build_dsp	2
	#define	core_config_bcr_multiply_build_cyc	0
	#define	core_config_bcr_multiply_build_type	2
	#define	core_config_bcr_multiply_build_version32x32	6
	#define	core_config_bcr_swap_build	0x00000003
	#define	core_config_bcr_swap_build_version	3
	#define	core_config_bcr_norm_build	0x00000003
	#define	core_config_bcr_norm_build_version	3
	#define	core_config_bcr_minmax_build	0x00000002
	#define	core_config_bcr_minmax_build_version	2
	#define	core_config_bcr_barrel_build	0x00000303
	#define	core_config_bcr_barrel_build_version	3
	#define	core_config_bcr_barrel_build_shift_option	3
	#define	core_config_bcr_isa_config	0x12047402
	#define	core_config_bcr_isa_config_res1	0
	#define	core_config_bcr_isa_config_d	1
	#define	core_config_bcr_isa_config_res2	0
	#define	core_config_bcr_isa_config_f	0
	#define	core_config_bcr_isa_config_c	2
	#define	core_config_bcr_isa_config_l	0
	#define	core_config_bcr_isa_config_n	0
	#define	core_config_bcr_isa_config_a	0
	#define	core_config_bcr_isa_config_b	0
	#define	core_config_bcr_isa_config_addr_size	4
	#define	core_config_bcr_isa_config_lpc_size	7
	#define	core_config_bcr_isa_config_pc_size	4
	#define	core_config_bcr_isa_config_version	2
	#define	core_config_bcr_dmp_pp_build	0xf0000012
	#define	core_config_bcr_stack_region_build	0x00000002
	#define	core_config_bcr_erp_build	0x50000004
	#define	core_config_bcr_erp_build_l	0
	#define	core_config_bcr_erp_build_wd	2
	#define	core_config_bcr_erp_build_c	1
	#define	core_config_bcr_erp_build_mmu	0
	#define	core_config_bcr_erp_build_rf	0
	#define	core_config_bcr_erp_build_pc	0
	#define	core_config_bcr_erp_build_ic	0
	#define	core_config_bcr_erp_build_dc	0
	#define	core_config_bcr_erp_build_ip	0
	#define	core_config_bcr_erp_build_dp	0
	#define	core_config_bcr_erp_build_version	4
	#define	core_config_bcr_fpu_build	0x01004f03
	#define	core_config_bcr_fpu_build_da	1
	#define	core_config_bcr_fpu_build_dd	0
	#define	core_config_bcr_fpu_build_dc	0
	#define	core_config_bcr_fpu_build_df	0
	#define	core_config_bcr_fpu_build_dp	0
	#define	core_config_bcr_fpu_build_fd_v1	2
	#define	core_config_bcr_fpu_build_pi	1
	#define	core_config_bcr_fpu_build_fd	0
	#define	core_config_bcr_fpu_build_fm	0
	#define	core_config_bcr_fpu_build_sd	1
	#define	core_config_bcr_fpu_build_sc	1
	#define	core_config_bcr_fpu_build_sf	1
	#define	core_config_bcr_fpu_build_sp	1
	#define	core_config_bcr_fpu_build_version	3
	#define	core_config_bcr_dmac_build	0x00120f02
	#define	core_config_bcr_dmac_build_int_cfg	2
	#define	core_config_bcr_dmac_build_fifo	1
	#define	core_config_bcr_dmac_build_chan_mem	0
	#define	core_config_bcr_dmac_build_channels	15
	#define	core_config_bcr_dmac_build_version	2
	#define	core_config_bcr_sec_build	0x00001005
	#define	core_config_bcr_sec_build_p	0
	#define	core_config_bcr_sec_build_c	0
	#define	core_config_bcr_sec_build_rpm	0
	#define	core_config_bcr_sec_build_ceb	0
	#define	core_config_bcr_sec_build_cem	0
	#define	core_config_bcr_sec_build_ut	0
	#define	core_config_bcr_sec_build_rpo	0
	#define	core_config_bcr_sec_build_rds	0
	#define	core_config_bcr_sec_build_ris	0
	#define	core_config_bcr_sec_build_dsm	0
	#define	core_config_bcr_sec_build_nsm	0
	#define	core_config_bcr_sec_build_i1sm	0
	#define	core_config_bcr_sec_build_i0sm	0
	#define	core_config_bcr_sec_build_s	1
	#define	core_config_bcr_sec_build_ei	0
	#define	core_config_bcr_sec_build_ed	0
	#define	core_config_bcr_sec_build_version	5
	#define	core_config_bcr_subsys_build	0x00101063
	#define	core_config_bcr_subsys_build_version_major	0
	#define	core_config_bcr_subsys_build_version_minor	2
	#define	core_config_bcr_subsys_build_version_build	6
	#define	core_config_bcr_subsys_build_type	3
	#define	core_config_bcr_core_config	0x00000101
	#define	core_config_bcr_core_config_turbo_boost	1
	#define	core_config_bcr_core_config_version	1
	#define	core_config_bcr_rtt_build	0x00000503
	#define	core_config_bcr_rtt_build_prod_src_num	0
	#define	core_config_bcr_rtt_build_fl	2
	#define	core_config_bcr_rtt_build_pi	1
	#define	core_config_bcr_rtt_build_version	3
	#define	core_config_bcr_irq_build	0x034d6101
	#define	core_config_bcr_irq_build_raz	0
	#define	core_config_bcr_irq_build_nmi	0
	#define	core_config_bcr_irq_build_f	0
	#define	core_config_bcr_irq_build_p	3
	#define	core_config_bcr_irq_build_exts	77
	#define	core_config_bcr_irq_build_irqs	97
	#define	core_config_bcr_irq_build_version	1
	#define	core_config_bcr_pct_build	0x08080104
	#define	core_config_bcr_pct_build_version	4
	#define	core_config_bcr_pct_build_s	1
	#define	core_config_bcr_pct_build_i	0
	#define	core_config_bcr_pct_build_c	8
	#define	core_config_bcr_cc_build	0x006f0004
	#define	core_config_bcr_cc_build_version	4
	#define	core_config_bcr_cc_build_cc	111
	#define	core_config_bcr_smart_build	0x00002003
	#define	core_config_bcr_smart_build_version	3
	#define	core_config_bcr_smart_build_stack_size	8
	#define	core_config_cir_aux_iccm	0x60000000
	#define	core_config_cir_subsys_dsp_0_build	0x00001000
	#define	core_config_cir_subsys_io_0_build	0x171700f0
	#define	core_config_cir_subsys_io_1_build	0x00000007
	#define	core_config_cir_subsys_io_2_build	0x00000111
	#define	core_config_cir_subsys_uaux_offset	0x00100000
	#define	core_config_cir_subsys_apex_offset	0x80000000
	#define	core_config_family	4
	#define	core_config_core_version	4
	#define	core_config_family_name	"arcv2em"
	#define	core_config_rgf_num_banks	1
	#define	core_config_rgf_num_wr_ports	1
	#define	core_config_endian	"little"
	#define	core_config_endian_little	1
	#define	core_config_endian_big	0
	#define	core_config_lpc_size	32
	#define	core_config_pc_size	32
	#define	core_config_addr_size	32
	#define	core_config_code_density	1
	#define	core_config_div_rem	"radix2"
	#define	core_config_div_rem_radix2	1
	#define	core_config_turbo_boost	1
	#define	core_config_swap	1
	#define	core_config_bitscan	1
	#define	core_config_mpy_option	"mpyd"
	#define	core_config_mpy_option_num	8
	#define	core_config_shift_assist	1
	#define	core_config_barrel_shifter	1
	#define	core_config_dsp	1
	#define	core_config_dsp2	1
	#define	core_config_dsp_complex	1
	#define	core_config_dsp_divsqrt	"radix2"
	#define	core_config_dsp_divsqrt_radix2	1
	#define	core_config_dsp_itu	1
	#define	core_config_dsp_accshift	"full"
	#define	core_config_dsp_accshift_full	1
	#define	core_config_fpus_div	1
	#define	core_config_fpu_mac	1
	#define	core_config_fpuda	1
	#define	core_config_fpus_mpy_slow	1
	#define	core_config_fpus_div_slow	1
	#define	core_config_fpu_pipe_impl	1
	#define	core_config_timer0	1
	#define	core_config_timer0_level	1
	#define	core_config_timer0_vector	16
	#define	core_config_sec_timer0	1
	#define	core_config_sec_timer0_level	1
	#define	core_config_sec_timer0_vector	20
	#define	core_config_rtc	1
	#define	core_config_action_points	8
	#define	core_config_stack_check	1
	#define	core_config_smart_stack_entries	8
	#define	core_config_mpu_present	1
	#define	core_config_mpuv4	1
	#define	core_config_mpu_sid	1
	#define	core_config_mpu_regions	16
	#define	core_config_interrupts_present	1
	#define	core_config_interrupts_number	97
	#define	core_config_interrupts_priorities	4
	#define	core_config_interrupts_externals	77
	#define	core_config_interrupts	97
	#define	core_config_interrupt_priorities	4
	#define	core_config_ext_interrupts	77
	#define	core_config_interrupts_base	0x400
	#define	core_config_interrupts_sec_base	0x0
	#define	core_config_dcache_present	1
	#define	core_config_dcache_size	16384
	#define	core_config_dcache_line_size	32
	#define	core_config_dcache_ways	2
	#define	core_config_dcache_feature	2
	#define	core_config_icache_present	1
	#define	core_config_icache_size	16384
	#define	core_config_icache_line_size	64
	#define	core_config_icache_ways	2
	#define	core_config_icache_feature	1
	#define	core_config_dccm_present	1
	#define	core_config_dccm_size	0x20000
	#define	core_config_dccm_base	0x80000000
	#define	core_config_iccm_present	1
	#define	core_config_iccm0_present	1
	#define	core_config_iccm_size	0x20000
	#define	core_config_iccm0_size	0x20000
	#define	core_config_iccm_base	0x60000000
	#define	core_config_iccm0_base	0x60000000
	#define	core_config_esp_encrypt	1
	#define	core_config_sec_modes	1
	#define	core_config_iccm0_sec_lvl	"NS"
	#define	core_config_dccm_sec_lvl	"NS"
	#define	core_config_error_prot_ver	4
	#define	core_config_ccm_prot_pipelined	1
	#define	core_config_watchdog	1
	#define	core_config_watchdog_size	32
	#define	core_config_pct_counters	8
	#define	core_config_dmac	1
	#define	core_config_dmac_channels	16
	#define	core_config_dmac_registers	0
	#define	core_config_dmac_fifo_depth	2
	#define	core_config_dmac_int_config	"multiple_internal"
	#define	core_config_clock_speed	10
#endif /* __core_config_h */

]]></string>
  </configuration>
  <configuration name="core" filename="core.props">
    <string><![CDATA[
	core_config.cir.identity=0x00000044
	core_config.cir.identity.chipid=0
	core_config.cir.identity.arcnum=0
	core_config.cir.identity.arcver=68
	core_config.cir.identity.family=4
	core_config.cir.identity.corever=4
	core_config.cir.aux_dccm=0x80000000
	core_config.bcr.bcr_ver=0x00000002
	core_config.bcr.bcr_ver.version=2
	core_config.bcr.vecbase_ac_build=0x00000410
	core_config.bcr.vecbase_ac_build.version=4
	core_config.bcr.vecbase_ac_build.vector_config=0
	core_config.bcr.vecbase_ac_build.addr=1
	core_config.bcr.mpu_build=0x00031004
	core_config.bcr.mpu_build.i=1
	core_config.bcr.mpu_build.s=1
	core_config.bcr.mpu_build.regions=16
	core_config.bcr.mpu_build.version=4
	core_config.bcr.rf_build=0x00000002
	core_config.bcr.rf_build.version=2
	core_config.bcr.rf_build.p=0
	core_config.bcr.rf_build.e=0
	core_config.bcr.rf_build.r=0
	core_config.bcr.rf_build.b=0
	core_config.bcr.rf_build.d=0
	core_config.bcr.sec_vecbase_build=0x00000001
	core_config.bcr.sec_vecbase_build.addr=0
	core_config.bcr.sec_vecbase_build.vector_config=0
	core_config.bcr.sec_vecbase_build.version=1
	core_config.bcr.d_cache_build=0x00215105
	core_config.bcr.d_cache_build.version=5
	core_config.bcr.d_cache_build.assoc=1
	core_config.bcr.d_cache_build.capacity=5
	core_config.bcr.d_cache_build.bsize=1
	core_config.bcr.d_cache_build.fl=2
	core_config.bcr.d_cache_build.ioc=0
	core_config.bcr.d_cache_build.cp=0
	core_config.bcr.d_cache_build.u=0
	core_config.bcr.d_cache_build.cycles=0
	core_config.bcr.dccm_build=0x00000905
	core_config.bcr.dccm_build.w=0
	core_config.bcr.dccm_build.cycles=0
	core_config.bcr.dccm_build.interleave=0
	core_config.bcr.dccm_build.size1=0
	core_config.bcr.dccm_build.size0=9
	core_config.bcr.dccm_build.version=5
	core_config.bcr.timer_build=0x01010d05
	core_config.bcr.timer_build.sp1=0
	core_config.bcr.timer_build.sp0=1
	core_config.bcr.timer_build.p1=0
	core_config.bcr.timer_build.p0=1
	core_config.bcr.timer_build.st1=0
	core_config.bcr.timer_build.st0=1
	core_config.bcr.timer_build.rtc=1
	core_config.bcr.timer_build.rtsc_ver=1
	core_config.bcr.timer_build.rtsc=1
	core_config.bcr.timer_build.t0=1
	core_config.bcr.timer_build.t1=0
	core_config.bcr.timer_build.version=5
	core_config.bcr.ap_build=0x00000605
	core_config.bcr.ap_build.version=5
	core_config.bcr.ap_build.type=6
	core_config.bcr.i_cache_build=0x00135105
	core_config.bcr.i_cache_build.assoc=1
	core_config.bcr.i_cache_build.version=5
	core_config.bcr.i_cache_build.capacity=5
	core_config.bcr.i_cache_build.bsize=3
	core_config.bcr.i_cache_build.fl=1
	core_config.bcr.i_cache_build.d=0
	core_config.bcr.iccm_build=0x00000905
	core_config.bcr.iccm_build.w0=0
	core_config.bcr.iccm_build.iccm1_size1=0
	core_config.bcr.iccm_build.iccm0_size1=0
	core_config.bcr.iccm_build.iccm1_size0=0
	core_config.bcr.iccm_build.iccm0_size0=9
	core_config.bcr.iccm_build.version=5
	core_config.bcr.dsp_build=0x00003521
	core_config.bcr.dsp_build.wide=0
	core_config.bcr.dsp_build.itu_pa=1
	core_config.bcr.dsp_build.acc_shift=2
	core_config.bcr.dsp_build.comp=1
	core_config.bcr.dsp_build.divsqrt=1
	core_config.bcr.dsp_build.version=33
	core_config.bcr.multiply_build=0x00022206
	core_config.bcr.multiply_build.version16x16=2
	core_config.bcr.multiply_build.dsp=2
	core_config.bcr.multiply_build.cyc=0
	core_config.bcr.multiply_build.type=2
	core_config.bcr.multiply_build.version32x32=6
	core_config.bcr.swap_build=0x00000003
	core_config.bcr.swap_build.version=3
	core_config.bcr.norm_build=0x00000003
	core_config.bcr.norm_build.version=3
	core_config.bcr.minmax_build=0x00000002
	core_config.bcr.minmax_build.version=2
	core_config.bcr.barrel_build=0x00000303
	core_config.bcr.barrel_build.version=3
	core_config.bcr.barrel_build.shift_option=3
	core_config.bcr.isa_config=0x12047402
	core_config.bcr.isa_config.res1=0
	core_config.bcr.isa_config.d=1
	core_config.bcr.isa_config.res2=0
	core_config.bcr.isa_config.f=0
	core_config.bcr.isa_config.c=2
	core_config.bcr.isa_config.l=0
	core_config.bcr.isa_config.n=0
	core_config.bcr.isa_config.a=0
	core_config.bcr.isa_config.b=0
	core_config.bcr.isa_config.addr_size=4
	core_config.bcr.isa_config.lpc_size=7
	core_config.bcr.isa_config.pc_size=4
	core_config.bcr.isa_config.version=2
	core_config.bcr.dmp_pp_build=0xf0000012
	core_config.bcr.stack_region_build=0x00000002
	core_config.bcr.erp_build=0x50000004
	core_config.bcr.erp_build.l=0
	core_config.bcr.erp_build.wd=2
	core_config.bcr.erp_build.c=1
	core_config.bcr.erp_build.mmu=0
	core_config.bcr.erp_build.rf=0
	core_config.bcr.erp_build.pc=0
	core_config.bcr.erp_build.ic=0
	core_config.bcr.erp_build.dc=0
	core_config.bcr.erp_build.ip=0
	core_config.bcr.erp_build.dp=0
	core_config.bcr.erp_build.version=4
	core_config.bcr.fpu_build=0x01004f03
	core_config.bcr.fpu_build.da=1
	core_config.bcr.fpu_build.dd=0
	core_config.bcr.fpu_build.dc=0
	core_config.bcr.fpu_build.df=0
	core_config.bcr.fpu_build.dp=0
	core_config.bcr.fpu_build.fd_v1=2
	core_config.bcr.fpu_build.pi=1
	core_config.bcr.fpu_build.fd=0
	core_config.bcr.fpu_build.fm=0
	core_config.bcr.fpu_build.sd=1
	core_config.bcr.fpu_build.sc=1
	core_config.bcr.fpu_build.sf=1
	core_config.bcr.fpu_build.sp=1
	core_config.bcr.fpu_build.version=3
	core_config.bcr.dmac_build=0x00120f02
	core_config.bcr.dmac_build.int_cfg=2
	core_config.bcr.dmac_build.fifo=1
	core_config.bcr.dmac_build.chan_mem=0
	core_config.bcr.dmac_build.channels=15
	core_config.bcr.dmac_build.version=2
	core_config.bcr.sec_build=0x00001005
	core_config.bcr.sec_build.p=0
	core_config.bcr.sec_build.c=0
	core_config.bcr.sec_build.rpm=0
	core_config.bcr.sec_build.ceb=0
	core_config.bcr.sec_build.cem=0
	core_config.bcr.sec_build.ut=0
	core_config.bcr.sec_build.rpo=0
	core_config.bcr.sec_build.rds=0
	core_config.bcr.sec_build.ris=0
	core_config.bcr.sec_build.dsm=0
	core_config.bcr.sec_build.nsm=0
	core_config.bcr.sec_build.i1sm=0
	core_config.bcr.sec_build.i0sm=0
	core_config.bcr.sec_build.s=1
	core_config.bcr.sec_build.ei=0
	core_config.bcr.sec_build.ed=0
	core_config.bcr.sec_build.version=5
	core_config.bcr.subsys_build=0x00101063
	core_config.bcr.subsys_build.version_major=0
	core_config.bcr.subsys_build.version_minor=2
	core_config.bcr.subsys_build.version_build=6
	core_config.bcr.subsys_build.type=3
	core_config.bcr.core_config=0x00000101
	core_config.bcr.core_config.turbo_boost=1
	core_config.bcr.core_config.version=1
	core_config.bcr.rtt_build=0x00000503
	core_config.bcr.rtt_build.prod_src_num=0
	core_config.bcr.rtt_build.fl=2
	core_config.bcr.rtt_build.pi=1
	core_config.bcr.rtt_build.version=3
	core_config.bcr.irq_build=0x034d6101
	core_config.bcr.irq_build.raz=0
	core_config.bcr.irq_build.nmi=0
	core_config.bcr.irq_build.f=0
	core_config.bcr.irq_build.p=3
	core_config.bcr.irq_build.exts=77
	core_config.bcr.irq_build.irqs=97
	core_config.bcr.irq_build.version=1
	core_config.bcr.pct_build=0x08080104
	core_config.bcr.pct_build.version=4
	core_config.bcr.pct_build.s=1
	core_config.bcr.pct_build.i=0
	core_config.bcr.pct_build.c=8
	core_config.bcr.cc_build=0x006f0004
	core_config.bcr.cc_build.version=4
	core_config.bcr.cc_build.cc=111
	core_config.bcr.smart_build=0x00002003
	core_config.bcr.smart_build.version=3
	core_config.bcr.smart_build.stack_size=8
	core_config.cir.aux_iccm=0x60000000
	core_config.cir.subsys_dsp_0_build=0x00001000
	core_config.cir.subsys_io_0_build=0x171700f0
	core_config.cir.subsys_io_1_build=0x00000007
	core_config.cir.subsys_io_2_build=0x00000111
	core_config.cir.subsys_uaux_offset=0x00100000
	core_config.cir.subsys_apex_offset=0x80000000
	core_config.family=4
	core_config.core_version=4
	core_config.family_name=arcv2em
	core_config.rgf_num_banks=1
	core_config.rgf_num_wr_ports=1
	core_config.endian=little
	core_config.endian_little=1
	core_config.endian_big=0
	core_config.lpc_size=32
	core_config.pc_size=32
	core_config.addr_size=32
	core_config.code_density=1
	core_config.div_rem=radix2
	core_config.div_rem_radix2=1
	core_config.turbo_boost=1
	core_config.swap=1
	core_config.bitscan=1
	core_config.mpy_option=mpyd
	core_config.mpy_option_num=8
	core_config.shift_assist=1
	core_config.barrel_shifter=1
	core_config.dsp=1
	core_config.dsp2=1
	core_config.dsp_complex=1
	core_config.dsp_divsqrt=radix2
	core_config.dsp_divsqrt_radix2=1
	core_config.dsp_itu=1
	core_config.dsp_accshift=full
	core_config.dsp_accshift_full=1
	core_config.fpus_div=1
	core_config.fpu_mac=1
	core_config.fpuda=1
	core_config.fpus_mpy_slow=1
	core_config.fpus_div_slow=1
	core_config.fpu_pipe_impl=1
	core_config.timer0=1
	core_config.timer0_level=1
	core_config.timer0.vector=16
	core_config.sec_timer0=1
	core_config.sec_timer0_level=1
	core_config.sec_timer0.vector=20
	core_config.rtc=1
	core_config.action_points=8
	core_config.stack_check=1
	core_config.smart_stack_entries=8
	core_config.mpu.present=1
	core_config.mpuv4=1
	core_config.mpu_sid=1
	core_config.mpu.regions=16
	core_config.interrupts.present=1
	core_config.interrupts.number=97
	core_config.interrupts.priorities=4
	core_config.interrupts.externals=77
	core_config.interrupts=97
	core_config.interrupt_priorities=4
	core_config.ext_interrupts=77
	core_config.interrupts.base=0x400
	core_config.interrupts.sec_base=0x0
	core_config.dcache.present=1
	core_config.dcache.size=16384
	core_config.dcache.line_size=32
	core_config.dcache.ways=2
	core_config.dcache_feature=2
	core_config.icache.present=1
	core_config.icache.size=16384
	core_config.icache.line_size=64
	core_config.icache.ways=2
	core_config.icache_feature=1
	core_config.dccm.present=1
	core_config.dccm_size=0x20000
	core_config.dccm_base=0x80000000
	core_config.iccm.present=1
	core_config.iccm0.present=1
	core_config.iccm.size=0x20000
	core_config.iccm0.size=0x20000
	core_config.iccm.base=0x60000000
	core_config.iccm0.base=0x60000000
	core_config.esp_encrypt=1
	core_config.sec_modes=1
	core_config.iccm0_sec_lvl=NS
	core_config.dccm_sec_lvl=NS
	core_config.error_prot_ver=4
	core_config.ccm_prot_pipelined=1
	core_config.watchdog=1
	core_config.watchdog_size=32
	core_config.pct_counters=8
	core_config.dmac=1
	core_config.dmac_channels=16
	core_config.dmac_registers=0
	core_config.dmac_fifo_depth=2
	core_config.dmac_int_config=multiple_internal
	core_config.clock_speed=10
]]></string>
  </configuration>
  <configuration name="gcc_compiler" filename="gcc.arg">
    <string><![CDATA[
	-mcpu=em4_fpuda
	-mlittle-endian
	-mcode-density
	-mdiv-rem
	-mswap
	-mnorm
	-mmpy-option=6
	-mbarrel-shifter
	-mfpu=fpuda_all
	--param l1-cache-size=16384
	--param l1-cache-line-size=32
]]></string>
  </configuration>
  <configuration name="linker_command_file" filename="link_cmd.txt">
    <string><![CDATA[
# SYSTEM memory regions indicate where external memory might be located.
#   The TCF has no specific knowledge of whether SYSTEM regions contain 
#   external memory or not.
# CCMWRAP memory regions indicate unusable portions of the address space
#   due to CCM memory wrapping into upper addresses beyond its size

MEMORY {
    IVT     : ORIGIN = 0x00000000, LENGTH = 0x00000400
    NIVT    : ORIGIN = 0x00000400, LENGTH = 0x5ffffc00
    ICCM0   : ORIGIN = 0x60000000, LENGTH = 0x00020000
#   CCMWRAP0: ORIGIN = 0x60020000, LENGTH = 0x0ffe0000
#   SYSTEM2 : ORIGIN = 0x70000000, LENGTH = 0x10000000
    DCCM    : ORIGIN = 0x80000000, LENGTH = 0x00020000
#   CCMWRAP1: ORIGIN = 0x80020000, LENGTH = 0x0ffe0000
    SYSTEM3 : ORIGIN = 0x90000000, LENGTH = 0x70000000
    }
SECTIONS {
    GROUP BLOCK(4): {
	.text? : { *('.text$crt*') }
        * (TEXT): {}
    	* (LIT): {}
	} > ICCM0

    GROUP BLOCK(4): {
	/* _SDA_BASE_ computed implicitly */
        .sdata?: {}
        .sbss?: {}
        * (DATA): {}
        * (BSS): {}
       .stack ALIGN(4) SIZE(DEFINED _STACKSIZE?_STACKSIZE:65536): {}
       .heap? ALIGN(4) SIZE(DEFINED _HEAPSIZE?_HEAPSIZE:0): {}
	} > SYSTEM3
    GROUP BLOCK(4) : {
        .vectors (TEXT) SIZE(DEFINED _IVTSIZE?_IVTSIZE:760): {} = FILL(0xa5a5a5a5,4)
        } > IVT
    GROUP BLOCK(4) : {
        .nvectors (TEXT) SIZE(DEFINED _IVTSIZE?_IVTSIZE:760): {} = FILL(0xa5a5a5a5,4)
        } > NIVT
    }

]]></string>
  </configuration>
  <configuration name="gnu_linker_command_file" filename="memory.x">
    <string><![CDATA[
MEMORY {
    IVT      : ORIGIN = 0x00000000, LENGTH = 0x00000400
    NIVT     : ORIGIN = 0x00000400, LENGTH = 0x5ffffc00
    ICCM0    : ORIGIN = 0x60000000, LENGTH = 0x00020000
    CCMWRAP0 : ORIGIN = 0x60020000, LENGTH = 0x0ffe0000
    SYSTEM2  : ORIGIN = 0x70000000, LENGTH = 0x10000000
    DCCM     : ORIGIN = 0x80000000, LENGTH = 0x00020000
    CCMWRAP1 : ORIGIN = 0x80020000, LENGTH = 0x0ffe0000
    SYSTEM3  : ORIGIN = 0x90000000, LENGTH = 0x70000000
    }
REGION_ALIAS("startup", ICCM0)
REGION_ALIAS("text", ICCM0)
REGION_ALIAS("data", DCCM)
REGION_ALIAS("sdata", DCCM)
PROVIDE (__stack_top = (0x8001ffff & -4 ));
PROVIDE (__end_heap =  (0x8001ffff ));
]]></string>
  </configuration>
  <configuration name="apex_header" filename="apexextensions.h">
    <string><![CDATA[

/* **** DO NOT EDIT - this file is generated by ARChitect2 ****
 *
 * Description: Header file declaring the compiler extensions for apex components 
 */

#ifndef _apexextensions_H_
#define _apexextensions_H_

// User extension instruction - dsp_cos
extern long dsp_cos(long);
#pragma intrinsic(dsp_cos, opcode => 0x07, sub_opcode => 0x1E , latency_cycles => 8)

// User extension instruction - dsp_sin
extern long dsp_sin(long);
#pragma intrinsic(dsp_sin, opcode => 0x07, sub_opcode => 0x1F , latency_cycles => 8)

// User extension instruction - dsp_tan
extern long dsp_tan(long);
#pragma intrinsic(dsp_tan, opcode => 0x07, sub_opcode => 0x22 , latency_cycles => 11)

// User extension instruction - dsp_acos
extern long dsp_acos(long);
#pragma intrinsic(dsp_acos, opcode => 0x07, sub_opcode => 0x23 , latency_cycles => 31)

// User extension instruction - dsp_asin
extern long dsp_asin(long);
#pragma intrinsic(dsp_asin, opcode => 0x07, sub_opcode => 0x24 , latency_cycles => 31)

// User extension instruction - dsp_atan
extern long dsp_atan(long);
#pragma intrinsic(dsp_atan, opcode => 0x07, sub_opcode => 0x25 , latency_cycles => 13)

// User extension instruction - dsp_sqrt
extern long dsp_sqrt(long);
#pragma intrinsic(dsp_sqrt, opcode => 0x07, sub_opcode => 0x20 , latency_cycles => 31)

// User extension instruction - dsp_sqrt15
extern long dsp_sqrt15(long);
#pragma intrinsic(dsp_sqrt15, opcode => 0x07, sub_opcode => 0x21 , latency_cycles => 15)

#define APEX_COM_ARC_HARDWARE_DFSS_DSP_TRIG_PRESENT	1
#define APEX_COM_ARC_HARDWARE_DFSS_IO_GPIO0_PRESENT	1

// User extension aux register io_gpio0_debounce
#define AR_IO_GPIO0_DEBOUNCE 0x80017048
#pragma Aux_register(0x80017048, name=>"io_gpio0_debounce")

// User extension aux register io_gpio0_clken
#define AR_IO_GPIO0_CLKEN 0x80017080
#pragma Aux_register(0x80017080, name=>"io_gpio0_clken")

// User extension aux register io_gpio0_swporta_dr
#define AR_IO_GPIO0_SWPORTA_DR 0x80017000
#pragma Aux_register(0x80017000, name=>"io_gpio0_swporta_dr")

// User extension aux register io_gpio0_swporta_ddr
#define AR_IO_GPIO0_SWPORTA_DDR 0x80017004
#pragma Aux_register(0x80017004, name=>"io_gpio0_swporta_ddr")

// User extension aux register io_gpio0_inten
#define AR_IO_GPIO0_INTEN 0x80017030
#pragma Aux_register(0x80017030, name=>"io_gpio0_inten")

// User extension aux register io_gpio0_intmask
#define AR_IO_GPIO0_INTMASK 0x80017034
#pragma Aux_register(0x80017034, name=>"io_gpio0_intmask")

// User extension aux register io_gpio0_inttype_level
#define AR_IO_GPIO0_INTTYPE_LEVEL 0x80017038
#pragma Aux_register(0x80017038, name=>"io_gpio0_inttype_level")

// User extension aux register io_gpio0_int_polarity
#define AR_IO_GPIO0_INT_POLARITY 0x8001703c
#pragma Aux_register(0x8001703c, name=>"io_gpio0_int_polarity")

// User extension aux register io_gpio0_intstatus
#define AR_IO_GPIO0_INTSTATUS 0x80017040
#pragma Aux_register(0x80017040, name=>"io_gpio0_intstatus")

// User extension aux register io_gpio0_raw_intstatus
#define AR_IO_GPIO0_RAW_INTSTATUS 0x80017044
#pragma Aux_register(0x80017044, name=>"io_gpio0_raw_intstatus")

// User extension aux register io_gpio0_porta_eoi
#define AR_IO_GPIO0_PORTA_EOI 0x8001704c
#pragma Aux_register(0x8001704c, name=>"io_gpio0_porta_eoi")

// User extension aux register io_gpio0_ext_porta
#define AR_IO_GPIO0_EXT_PORTA 0x80017050
#pragma Aux_register(0x80017050, name=>"io_gpio0_ext_porta")

// User extension aux register io_gpio0_ls_sync
#define AR_IO_GPIO0_LS_SYNC 0x80017060
#pragma Aux_register(0x80017060, name=>"io_gpio0_ls_sync")

// User extension aux register io_gpio0_int_bothedge
#define AR_IO_GPIO0_INT_BOTHEDGE 0x80017068
#pragma Aux_register(0x80017068, name=>"io_gpio0_int_bothedge")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_I2C_MST0_PRESENT	1

// User extension aux register io_i2c_mst0_clken
#define AR_IO_I2C_MST0_CLKEN 0x800120c0
#pragma Aux_register(0x800120c0, name=>"io_i2c_mst0_clken")

// User extension aux register io_i2c_mst0_con
#define AR_IO_I2C_MST0_CON 0x80012000
#pragma Aux_register(0x80012000, name=>"io_i2c_mst0_con")

// User extension aux register io_i2c_mst0_tar
#define AR_IO_I2C_MST0_TAR 0x80012004
#pragma Aux_register(0x80012004, name=>"io_i2c_mst0_tar")

// User extension aux register io_i2c_mst0_data_cmd
#define AR_IO_I2C_MST0_DATA_CMD 0x80012010
#pragma Aux_register(0x80012010, name=>"io_i2c_mst0_data_cmd")

// User extension aux register io_i2c_mst0_ss_scl_hcnt
#define AR_IO_I2C_MST0_SS_SCL_HCNT 0x80012014
#pragma Aux_register(0x80012014, name=>"io_i2c_mst0_ss_scl_hcnt")

// User extension aux register io_i2c_mst0_ss_scl_lcnt
#define AR_IO_I2C_MST0_SS_SCL_LCNT 0x80012018
#pragma Aux_register(0x80012018, name=>"io_i2c_mst0_ss_scl_lcnt")

// User extension aux register io_i2c_mst0_fs_scl_hcnt
#define AR_IO_I2C_MST0_FS_SCL_HCNT 0x8001201c
#pragma Aux_register(0x8001201c, name=>"io_i2c_mst0_fs_scl_hcnt")

// User extension aux register io_i2c_mst0_fs_scl_lcnt
#define AR_IO_I2C_MST0_FS_SCL_LCNT 0x80012020
#pragma Aux_register(0x80012020, name=>"io_i2c_mst0_fs_scl_lcnt")

// User extension aux register io_i2c_mst0_intr_stat
#define AR_IO_I2C_MST0_INTR_STAT 0x8001202c
#pragma Aux_register(0x8001202c, name=>"io_i2c_mst0_intr_stat")

// User extension aux register io_i2c_mst0_intr_mask
#define AR_IO_I2C_MST0_INTR_MASK 0x80012030
#pragma Aux_register(0x80012030, name=>"io_i2c_mst0_intr_mask")

// User extension aux register io_i2c_mst0_raw_intr_stat
#define AR_IO_I2C_MST0_RAW_INTR_STAT 0x80012034
#pragma Aux_register(0x80012034, name=>"io_i2c_mst0_raw_intr_stat")

// User extension aux register io_i2c_mst0_rx_tl
#define AR_IO_I2C_MST0_RX_TL 0x80012038
#pragma Aux_register(0x80012038, name=>"io_i2c_mst0_rx_tl")

// User extension aux register io_i2c_mst0_tx_tl
#define AR_IO_I2C_MST0_TX_TL 0x8001203c
#pragma Aux_register(0x8001203c, name=>"io_i2c_mst0_tx_tl")

// User extension aux register io_i2c_mst0_clr_intr
#define AR_IO_I2C_MST0_CLR_INTR 0x80012040
#pragma Aux_register(0x80012040, name=>"io_i2c_mst0_clr_intr")

// User extension aux register io_i2c_mst0_clr_rx_under
#define AR_IO_I2C_MST0_CLR_RX_UNDER 0x80012044
#pragma Aux_register(0x80012044, name=>"io_i2c_mst0_clr_rx_under")

// User extension aux register io_i2c_mst0_clr_rx_over
#define AR_IO_I2C_MST0_CLR_RX_OVER 0x80012048
#pragma Aux_register(0x80012048, name=>"io_i2c_mst0_clr_rx_over")

// User extension aux register io_i2c_mst0_clr_tx_over
#define AR_IO_I2C_MST0_CLR_TX_OVER 0x8001204c
#pragma Aux_register(0x8001204c, name=>"io_i2c_mst0_clr_tx_over")

// User extension aux register io_i2c_mst0_clr_tx_abrt
#define AR_IO_I2C_MST0_CLR_TX_ABRT 0x80012054
#pragma Aux_register(0x80012054, name=>"io_i2c_mst0_clr_tx_abrt")

// User extension aux register io_i2c_mst0_clr_activity
#define AR_IO_I2C_MST0_CLR_ACTIVITY 0x8001205c
#pragma Aux_register(0x8001205c, name=>"io_i2c_mst0_clr_activity")

// User extension aux register io_i2c_mst0_clr_stop_det
#define AR_IO_I2C_MST0_CLR_STOP_DET 0x80012060
#pragma Aux_register(0x80012060, name=>"io_i2c_mst0_clr_stop_det")

// User extension aux register io_i2c_mst0_clr_start_det
#define AR_IO_I2C_MST0_CLR_START_DET 0x80012064
#pragma Aux_register(0x80012064, name=>"io_i2c_mst0_clr_start_det")

// User extension aux register io_i2c_mst0_enable
#define AR_IO_I2C_MST0_ENABLE 0x8001206c
#pragma Aux_register(0x8001206c, name=>"io_i2c_mst0_enable")

// User extension aux register io_i2c_mst0_status
#define AR_IO_I2C_MST0_STATUS 0x80012070
#pragma Aux_register(0x80012070, name=>"io_i2c_mst0_status")

// User extension aux register io_i2c_mst0_txflr
#define AR_IO_I2C_MST0_TXFLR 0x80012074
#pragma Aux_register(0x80012074, name=>"io_i2c_mst0_txflr")

// User extension aux register io_i2c_mst0_rxflr
#define AR_IO_I2C_MST0_RXFLR 0x80012078
#pragma Aux_register(0x80012078, name=>"io_i2c_mst0_rxflr")

// User extension aux register io_i2c_mst0_sda_hold
#define AR_IO_I2C_MST0_SDA_HOLD 0x8001207c
#pragma Aux_register(0x8001207c, name=>"io_i2c_mst0_sda_hold")

// User extension aux register io_i2c_mst0_tx_abrt_source
#define AR_IO_I2C_MST0_TX_ABRT_SOURCE 0x80012080
#pragma Aux_register(0x80012080, name=>"io_i2c_mst0_tx_abrt_source")

// User extension aux register io_i2c_mst0_enable_status
#define AR_IO_I2C_MST0_ENABLE_STATUS 0x8001209c
#pragma Aux_register(0x8001209c, name=>"io_i2c_mst0_enable_status")

// User extension aux register io_i2c_mst0_fs_spklen
#define AR_IO_I2C_MST0_FS_SPKLEN 0x800120a0
#pragma Aux_register(0x800120a0, name=>"io_i2c_mst0_fs_spklen")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_I2C_SLV0_PRESENT	1

// User extension aux register io_i2c_slv0_clken
#define AR_IO_I2C_SLV0_CLKEN 0x800130c0
#pragma Aux_register(0x800130c0, name=>"io_i2c_slv0_clken")

// User extension aux register io_i2c_slv0_con
#define AR_IO_I2C_SLV0_CON 0x80013000
#pragma Aux_register(0x80013000, name=>"io_i2c_slv0_con")

// User extension aux register io_i2c_slv0_sar
#define AR_IO_I2C_SLV0_SAR 0x80013008
#pragma Aux_register(0x80013008, name=>"io_i2c_slv0_sar")

// User extension aux register io_i2c_slv0_data_cmd
#define AR_IO_I2C_SLV0_DATA_CMD 0x80013010
#pragma Aux_register(0x80013010, name=>"io_i2c_slv0_data_cmd")

// User extension aux register io_i2c_slv0_intr_stat
#define AR_IO_I2C_SLV0_INTR_STAT 0x8001302c
#pragma Aux_register(0x8001302c, name=>"io_i2c_slv0_intr_stat")

// User extension aux register io_i2c_slv0_intr_mask
#define AR_IO_I2C_SLV0_INTR_MASK 0x80013030
#pragma Aux_register(0x80013030, name=>"io_i2c_slv0_intr_mask")

// User extension aux register io_i2c_slv0_raw_intr_stat
#define AR_IO_I2C_SLV0_RAW_INTR_STAT 0x80013034
#pragma Aux_register(0x80013034, name=>"io_i2c_slv0_raw_intr_stat")

// User extension aux register io_i2c_slv0_rx_tl
#define AR_IO_I2C_SLV0_RX_TL 0x80013038
#pragma Aux_register(0x80013038, name=>"io_i2c_slv0_rx_tl")

// User extension aux register io_i2c_slv0_tx_tl
#define AR_IO_I2C_SLV0_TX_TL 0x8001303c
#pragma Aux_register(0x8001303c, name=>"io_i2c_slv0_tx_tl")

// User extension aux register io_i2c_slv0_clr_intr
#define AR_IO_I2C_SLV0_CLR_INTR 0x80013040
#pragma Aux_register(0x80013040, name=>"io_i2c_slv0_clr_intr")

// User extension aux register io_i2c_slv0_clr_rx_under
#define AR_IO_I2C_SLV0_CLR_RX_UNDER 0x80013044
#pragma Aux_register(0x80013044, name=>"io_i2c_slv0_clr_rx_under")

// User extension aux register io_i2c_slv0_clr_rx_over
#define AR_IO_I2C_SLV0_CLR_RX_OVER 0x80013048
#pragma Aux_register(0x80013048, name=>"io_i2c_slv0_clr_rx_over")

// User extension aux register io_i2c_slv0_clr_tx_over
#define AR_IO_I2C_SLV0_CLR_TX_OVER 0x8001304c
#pragma Aux_register(0x8001304c, name=>"io_i2c_slv0_clr_tx_over")

// User extension aux register io_i2c_slv0_clr_rd_req
#define AR_IO_I2C_SLV0_CLR_RD_REQ 0x80013050
#pragma Aux_register(0x80013050, name=>"io_i2c_slv0_clr_rd_req")

// User extension aux register io_i2c_slv0_clr_tx_abrt
#define AR_IO_I2C_SLV0_CLR_TX_ABRT 0x80013054
#pragma Aux_register(0x80013054, name=>"io_i2c_slv0_clr_tx_abrt")

// User extension aux register io_i2c_slv0_clr_rx_done
#define AR_IO_I2C_SLV0_CLR_RX_DONE 0x80013058
#pragma Aux_register(0x80013058, name=>"io_i2c_slv0_clr_rx_done")

// User extension aux register io_i2c_slv0_clr_activity
#define AR_IO_I2C_SLV0_CLR_ACTIVITY 0x8001305c
#pragma Aux_register(0x8001305c, name=>"io_i2c_slv0_clr_activity")

// User extension aux register io_i2c_slv0_clr_stop_det
#define AR_IO_I2C_SLV0_CLR_STOP_DET 0x80013060
#pragma Aux_register(0x80013060, name=>"io_i2c_slv0_clr_stop_det")

// User extension aux register io_i2c_slv0_clr_start_det
#define AR_IO_I2C_SLV0_CLR_START_DET 0x80013064
#pragma Aux_register(0x80013064, name=>"io_i2c_slv0_clr_start_det")

// User extension aux register io_i2c_slv0_enable
#define AR_IO_I2C_SLV0_ENABLE 0x8001306c
#pragma Aux_register(0x8001306c, name=>"io_i2c_slv0_enable")

// User extension aux register io_i2c_slv0_status
#define AR_IO_I2C_SLV0_STATUS 0x80013070
#pragma Aux_register(0x80013070, name=>"io_i2c_slv0_status")

// User extension aux register io_i2c_slv0_txflr
#define AR_IO_I2C_SLV0_TXFLR 0x80013074
#pragma Aux_register(0x80013074, name=>"io_i2c_slv0_txflr")

// User extension aux register io_i2c_slv0_rxflr
#define AR_IO_I2C_SLV0_RXFLR 0x80013078
#pragma Aux_register(0x80013078, name=>"io_i2c_slv0_rxflr")

// User extension aux register io_i2c_slv0_sda_hold
#define AR_IO_I2C_SLV0_SDA_HOLD 0x8001307c
#pragma Aux_register(0x8001307c, name=>"io_i2c_slv0_sda_hold")

// User extension aux register io_i2c_slv0_tx_abrt_source
#define AR_IO_I2C_SLV0_TX_ABRT_SOURCE 0x80013080
#pragma Aux_register(0x80013080, name=>"io_i2c_slv0_tx_abrt_source")

// User extension aux register io_i2c_slv0_sda_setup
#define AR_IO_I2C_SLV0_SDA_SETUP 0x80013094
#pragma Aux_register(0x80013094, name=>"io_i2c_slv0_sda_setup")

// User extension aux register io_i2c_slv0_enable_status
#define AR_IO_I2C_SLV0_ENABLE_STATUS 0x8001309c
#pragma Aux_register(0x8001309c, name=>"io_i2c_slv0_enable_status")

// User extension aux register io_i2c_slv0_fs_spklen
#define AR_IO_I2C_SLV0_FS_SPKLEN 0x800130a0
#pragma Aux_register(0x800130a0, name=>"io_i2c_slv0_fs_spklen")

// User extension aux register io_i2c_slv0_clr_restart_det
#define AR_IO_I2C_SLV0_CLR_RESTART_DET 0x800130a8
#pragma Aux_register(0x800130a8, name=>"io_i2c_slv0_clr_restart_det")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_SPI_MST0_PRESENT	1

// User extension aux register io_spi_mst0_ctrlr0
#define AR_IO_SPI_MST0_CTRLR0 0x80010000
#pragma Aux_register(0x80010000, name=>"io_spi_mst0_ctrlr0")

// User extension aux register io_spi_mst0_ctrlr1
#define AR_IO_SPI_MST0_CTRLR1 0x80010001
#pragma Aux_register(0x80010001, name=>"io_spi_mst0_ctrlr1")

// User extension aux register io_spi_mst0_spien
#define AR_IO_SPI_MST0_SPIEN 0x80010002
#pragma Aux_register(0x80010002, name=>"io_spi_mst0_spien")

// User extension aux register io_spi_mst0_ser
#define AR_IO_SPI_MST0_SER 0x80010004
#pragma Aux_register(0x80010004, name=>"io_spi_mst0_ser")

// User extension aux register io_spi_mst0_baudr
#define AR_IO_SPI_MST0_BAUDR 0x80010005
#pragma Aux_register(0x80010005, name=>"io_spi_mst0_baudr")

// User extension aux register io_spi_mst0_txftlr
#define AR_IO_SPI_MST0_TXFTLR 0x80010006
#pragma Aux_register(0x80010006, name=>"io_spi_mst0_txftlr")

// User extension aux register io_spi_mst0_rxftlr
#define AR_IO_SPI_MST0_RXFTLR 0x80010007
#pragma Aux_register(0x80010007, name=>"io_spi_mst0_rxftlr")

// User extension aux register io_spi_mst0_txflr
#define AR_IO_SPI_MST0_TXFLR 0x80010008
#pragma Aux_register(0x80010008, name=>"io_spi_mst0_txflr")

// User extension aux register io_spi_mst0_rxflr
#define AR_IO_SPI_MST0_RXFLR 0x80010009
#pragma Aux_register(0x80010009, name=>"io_spi_mst0_rxflr")

// User extension aux register io_spi_mst0_sr
#define AR_IO_SPI_MST0_SR 0x8001000a
#pragma Aux_register(0x8001000a, name=>"io_spi_mst0_sr")

// User extension aux register io_spi_mst0_imr
#define AR_IO_SPI_MST0_IMR 0x8001000b
#pragma Aux_register(0x8001000b, name=>"io_spi_mst0_imr")

// User extension aux register io_spi_mst0_isr
#define AR_IO_SPI_MST0_ISR 0x8001000c
#pragma Aux_register(0x8001000c, name=>"io_spi_mst0_isr")

// User extension aux register io_spi_mst0_risr
#define AR_IO_SPI_MST0_RISR 0x8001000d
#pragma Aux_register(0x8001000d, name=>"io_spi_mst0_risr")

// User extension aux register io_spi_mst0_txoicr
#define AR_IO_SPI_MST0_TXOICR 0x8001000e
#pragma Aux_register(0x8001000e, name=>"io_spi_mst0_txoicr")

// User extension aux register io_spi_mst0_rxoicr
#define AR_IO_SPI_MST0_RXOICR 0x8001000f
#pragma Aux_register(0x8001000f, name=>"io_spi_mst0_rxoicr")

// User extension aux register io_spi_mst0_rxuicr
#define AR_IO_SPI_MST0_RXUICR 0x80010010
#pragma Aux_register(0x80010010, name=>"io_spi_mst0_rxuicr")

// User extension aux register io_spi_mst0_icr
#define AR_IO_SPI_MST0_ICR 0x80010012
#pragma Aux_register(0x80010012, name=>"io_spi_mst0_icr")

// User extension aux register io_spi_mst0_clken
#define AR_IO_SPI_MST0_CLKEN 0x80010016
#pragma Aux_register(0x80010016, name=>"io_spi_mst0_clken")

// User extension aux register io_spi_mst0_dr
#define AR_IO_SPI_MST0_DR 0x80010018
#pragma Aux_register(0x80010018, name=>"io_spi_mst0_dr")

// User extension aux register io_spi_mst0_rx_sample_dly
#define AR_IO_SPI_MST0_RX_SAMPLE_DLY 0x8001003c
#pragma Aux_register(0x8001003c, name=>"io_spi_mst0_rx_sample_dly")
#define APEX_COM_ARC_HARDWARE_DFSS_SUBSYS_BCR_PRESENT	1

// User extension aux register SUBSYS_BUILD
#define AR_SUBSYS_BUILD 0xf0
#pragma Aux_register(0xf0, name=>"SUBSYS_BUILD")

// User extension aux register SUBSYS_DSP_0_BUILD
#define AR_SUBSYS_DSP_0_BUILD 0xa00
#pragma Aux_register(0xa00, name=>"SUBSYS_DSP_0_BUILD")

// User extension aux register SUBSYS_DSP_0_CONFIG
#define AR_SUBSYS_DSP_0_CONFIG 0xa02
#pragma Aux_register(0xa02, name=>"SUBSYS_DSP_0_CONFIG")

// User extension aux register SUBSYS_IO_0_BUILD
#define AR_SUBSYS_IO_0_BUILD 0xa04
#pragma Aux_register(0xa04, name=>"SUBSYS_IO_0_BUILD")

// User extension aux register SUBSYS_IO_1_BUILD
#define AR_SUBSYS_IO_1_BUILD 0xa05
#pragma Aux_register(0xa05, name=>"SUBSYS_IO_1_BUILD")

// User extension aux register SUBSYS_IO_2_BUILD
#define AR_SUBSYS_IO_2_BUILD 0xa06
#pragma Aux_register(0xa06, name=>"SUBSYS_IO_2_BUILD")

// User extension aux register SUBSYS_UAUX_OFFSET
#define AR_SUBSYS_UAUX_OFFSET 0xa1e
#pragma Aux_register(0xa1e, name=>"SUBSYS_UAUX_OFFSET")

// User extension aux register SUBSYS_APEX_OFFSET
#define AR_SUBSYS_APEX_OFFSET 0xa1f
#pragma Aux_register(0xa1f, name=>"SUBSYS_APEX_OFFSET")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_SPI_MST1_PRESENT	1

// User extension aux register io_spi_mst1_ctrlr0
#define AR_IO_SPI_MST1_CTRLR0 0x80010100
#pragma Aux_register(0x80010100, name=>"io_spi_mst1_ctrlr0")

// User extension aux register io_spi_mst1_ctrlr1
#define AR_IO_SPI_MST1_CTRLR1 0x80010101
#pragma Aux_register(0x80010101, name=>"io_spi_mst1_ctrlr1")

// User extension aux register io_spi_mst1_spien
#define AR_IO_SPI_MST1_SPIEN 0x80010102
#pragma Aux_register(0x80010102, name=>"io_spi_mst1_spien")

// User extension aux register io_spi_mst1_ser
#define AR_IO_SPI_MST1_SER 0x80010104
#pragma Aux_register(0x80010104, name=>"io_spi_mst1_ser")

// User extension aux register io_spi_mst1_baudr
#define AR_IO_SPI_MST1_BAUDR 0x80010105
#pragma Aux_register(0x80010105, name=>"io_spi_mst1_baudr")

// User extension aux register io_spi_mst1_txftlr
#define AR_IO_SPI_MST1_TXFTLR 0x80010106
#pragma Aux_register(0x80010106, name=>"io_spi_mst1_txftlr")

// User extension aux register io_spi_mst1_rxftlr
#define AR_IO_SPI_MST1_RXFTLR 0x80010107
#pragma Aux_register(0x80010107, name=>"io_spi_mst1_rxftlr")

// User extension aux register io_spi_mst1_txflr
#define AR_IO_SPI_MST1_TXFLR 0x80010108
#pragma Aux_register(0x80010108, name=>"io_spi_mst1_txflr")

// User extension aux register io_spi_mst1_rxflr
#define AR_IO_SPI_MST1_RXFLR 0x80010109
#pragma Aux_register(0x80010109, name=>"io_spi_mst1_rxflr")

// User extension aux register io_spi_mst1_sr
#define AR_IO_SPI_MST1_SR 0x8001010a
#pragma Aux_register(0x8001010a, name=>"io_spi_mst1_sr")

// User extension aux register io_spi_mst1_imr
#define AR_IO_SPI_MST1_IMR 0x8001010b
#pragma Aux_register(0x8001010b, name=>"io_spi_mst1_imr")

// User extension aux register io_spi_mst1_isr
#define AR_IO_SPI_MST1_ISR 0x8001010c
#pragma Aux_register(0x8001010c, name=>"io_spi_mst1_isr")

// User extension aux register io_spi_mst1_risr
#define AR_IO_SPI_MST1_RISR 0x8001010d
#pragma Aux_register(0x8001010d, name=>"io_spi_mst1_risr")

// User extension aux register io_spi_mst1_txoicr
#define AR_IO_SPI_MST1_TXOICR 0x8001010e
#pragma Aux_register(0x8001010e, name=>"io_spi_mst1_txoicr")

// User extension aux register io_spi_mst1_rxoicr
#define AR_IO_SPI_MST1_RXOICR 0x8001010f
#pragma Aux_register(0x8001010f, name=>"io_spi_mst1_rxoicr")

// User extension aux register io_spi_mst1_rxuicr
#define AR_IO_SPI_MST1_RXUICR 0x80010110
#pragma Aux_register(0x80010110, name=>"io_spi_mst1_rxuicr")

// User extension aux register io_spi_mst1_icr
#define AR_IO_SPI_MST1_ICR 0x80010112
#pragma Aux_register(0x80010112, name=>"io_spi_mst1_icr")

// User extension aux register io_spi_mst1_clken
#define AR_IO_SPI_MST1_CLKEN 0x80010116
#pragma Aux_register(0x80010116, name=>"io_spi_mst1_clken")

// User extension aux register io_spi_mst1_dr
#define AR_IO_SPI_MST1_DR 0x80010118
#pragma Aux_register(0x80010118, name=>"io_spi_mst1_dr")

// User extension aux register io_spi_mst1_rx_sample_dly
#define AR_IO_SPI_MST1_RX_SAMPLE_DLY 0x8001013c
#pragma Aux_register(0x8001013c, name=>"io_spi_mst1_rx_sample_dly")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_SPI_MST2_PRESENT	1

// User extension aux register io_spi_mst2_ctrlr0
#define AR_IO_SPI_MST2_CTRLR0 0x80010200
#pragma Aux_register(0x80010200, name=>"io_spi_mst2_ctrlr0")

// User extension aux register io_spi_mst2_ctrlr1
#define AR_IO_SPI_MST2_CTRLR1 0x80010201
#pragma Aux_register(0x80010201, name=>"io_spi_mst2_ctrlr1")

// User extension aux register io_spi_mst2_spien
#define AR_IO_SPI_MST2_SPIEN 0x80010202
#pragma Aux_register(0x80010202, name=>"io_spi_mst2_spien")

// User extension aux register io_spi_mst2_ser
#define AR_IO_SPI_MST2_SER 0x80010204
#pragma Aux_register(0x80010204, name=>"io_spi_mst2_ser")

// User extension aux register io_spi_mst2_baudr
#define AR_IO_SPI_MST2_BAUDR 0x80010205
#pragma Aux_register(0x80010205, name=>"io_spi_mst2_baudr")

// User extension aux register io_spi_mst2_txftlr
#define AR_IO_SPI_MST2_TXFTLR 0x80010206
#pragma Aux_register(0x80010206, name=>"io_spi_mst2_txftlr")

// User extension aux register io_spi_mst2_rxftlr
#define AR_IO_SPI_MST2_RXFTLR 0x80010207
#pragma Aux_register(0x80010207, name=>"io_spi_mst2_rxftlr")

// User extension aux register io_spi_mst2_txflr
#define AR_IO_SPI_MST2_TXFLR 0x80010208
#pragma Aux_register(0x80010208, name=>"io_spi_mst2_txflr")

// User extension aux register io_spi_mst2_rxflr
#define AR_IO_SPI_MST2_RXFLR 0x80010209
#pragma Aux_register(0x80010209, name=>"io_spi_mst2_rxflr")

// User extension aux register io_spi_mst2_sr
#define AR_IO_SPI_MST2_SR 0x8001020a
#pragma Aux_register(0x8001020a, name=>"io_spi_mst2_sr")

// User extension aux register io_spi_mst2_imr
#define AR_IO_SPI_MST2_IMR 0x8001020b
#pragma Aux_register(0x8001020b, name=>"io_spi_mst2_imr")

// User extension aux register io_spi_mst2_isr
#define AR_IO_SPI_MST2_ISR 0x8001020c
#pragma Aux_register(0x8001020c, name=>"io_spi_mst2_isr")

// User extension aux register io_spi_mst2_risr
#define AR_IO_SPI_MST2_RISR 0x8001020d
#pragma Aux_register(0x8001020d, name=>"io_spi_mst2_risr")

// User extension aux register io_spi_mst2_txoicr
#define AR_IO_SPI_MST2_TXOICR 0x8001020e
#pragma Aux_register(0x8001020e, name=>"io_spi_mst2_txoicr")

// User extension aux register io_spi_mst2_rxoicr
#define AR_IO_SPI_MST2_RXOICR 0x8001020f
#pragma Aux_register(0x8001020f, name=>"io_spi_mst2_rxoicr")

// User extension aux register io_spi_mst2_rxuicr
#define AR_IO_SPI_MST2_RXUICR 0x80010210
#pragma Aux_register(0x80010210, name=>"io_spi_mst2_rxuicr")

// User extension aux register io_spi_mst2_icr
#define AR_IO_SPI_MST2_ICR 0x80010212
#pragma Aux_register(0x80010212, name=>"io_spi_mst2_icr")

// User extension aux register io_spi_mst2_clken
#define AR_IO_SPI_MST2_CLKEN 0x80010216
#pragma Aux_register(0x80010216, name=>"io_spi_mst2_clken")

// User extension aux register io_spi_mst2_dr
#define AR_IO_SPI_MST2_DR 0x80010218
#pragma Aux_register(0x80010218, name=>"io_spi_mst2_dr")

// User extension aux register io_spi_mst2_rx_sample_dly
#define AR_IO_SPI_MST2_RX_SAMPLE_DLY 0x8001023c
#pragma Aux_register(0x8001023c, name=>"io_spi_mst2_rx_sample_dly")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_SPI_SLV0_PRESENT	1

// User extension aux register io_spi_slv0_ctrlr0
#define AR_IO_SPI_SLV0_CTRLR0 0x80011000
#pragma Aux_register(0x80011000, name=>"io_spi_slv0_ctrlr0")

// User extension aux register io_spi_slv0_spien
#define AR_IO_SPI_SLV0_SPIEN 0x80011002
#pragma Aux_register(0x80011002, name=>"io_spi_slv0_spien")

// User extension aux register io_spi_slv0_txftlr
#define AR_IO_SPI_SLV0_TXFTLR 0x80011006
#pragma Aux_register(0x80011006, name=>"io_spi_slv0_txftlr")

// User extension aux register io_spi_slv0_rxftlr
#define AR_IO_SPI_SLV0_RXFTLR 0x80011007
#pragma Aux_register(0x80011007, name=>"io_spi_slv0_rxftlr")

// User extension aux register io_spi_slv0_txflr
#define AR_IO_SPI_SLV0_TXFLR 0x80011008
#pragma Aux_register(0x80011008, name=>"io_spi_slv0_txflr")

// User extension aux register io_spi_slv0_rxflr
#define AR_IO_SPI_SLV0_RXFLR 0x80011009
#pragma Aux_register(0x80011009, name=>"io_spi_slv0_rxflr")

// User extension aux register io_spi_slv0_sr
#define AR_IO_SPI_SLV0_SR 0x8001100a
#pragma Aux_register(0x8001100a, name=>"io_spi_slv0_sr")

// User extension aux register io_spi_slv0_imr
#define AR_IO_SPI_SLV0_IMR 0x8001100b
#pragma Aux_register(0x8001100b, name=>"io_spi_slv0_imr")

// User extension aux register io_spi_slv0_isr
#define AR_IO_SPI_SLV0_ISR 0x8001100c
#pragma Aux_register(0x8001100c, name=>"io_spi_slv0_isr")

// User extension aux register io_spi_slv0_risr
#define AR_IO_SPI_SLV0_RISR 0x8001100d
#pragma Aux_register(0x8001100d, name=>"io_spi_slv0_risr")

// User extension aux register io_spi_slv0_txoicr
#define AR_IO_SPI_SLV0_TXOICR 0x8001100e
#pragma Aux_register(0x8001100e, name=>"io_spi_slv0_txoicr")

// User extension aux register io_spi_slv0_rxoicr
#define AR_IO_SPI_SLV0_RXOICR 0x8001100f
#pragma Aux_register(0x8001100f, name=>"io_spi_slv0_rxoicr")

// User extension aux register io_spi_slv0_rxuicr
#define AR_IO_SPI_SLV0_RXUICR 0x80011010
#pragma Aux_register(0x80011010, name=>"io_spi_slv0_rxuicr")

// User extension aux register io_spi_slv0_icr
#define AR_IO_SPI_SLV0_ICR 0x80011012
#pragma Aux_register(0x80011012, name=>"io_spi_slv0_icr")

// User extension aux register io_spi_slv0_clken
#define AR_IO_SPI_SLV0_CLKEN 0x80011016
#pragma Aux_register(0x80011016, name=>"io_spi_slv0_clken")

// User extension aux register io_spi_slv0_dr
#define AR_IO_SPI_SLV0_DR 0x80011018
#pragma Aux_register(0x80011018, name=>"io_spi_slv0_dr")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_GPIO1_PRESENT	1

// User extension aux register io_gpio1_debounce
#define AR_IO_GPIO1_DEBOUNCE 0x80017148
#pragma Aux_register(0x80017148, name=>"io_gpio1_debounce")

// User extension aux register io_gpio1_clken
#define AR_IO_GPIO1_CLKEN 0x80017180
#pragma Aux_register(0x80017180, name=>"io_gpio1_clken")

// User extension aux register io_gpio1_swporta_dr
#define AR_IO_GPIO1_SWPORTA_DR 0x80017100
#pragma Aux_register(0x80017100, name=>"io_gpio1_swporta_dr")

// User extension aux register io_gpio1_swporta_ddr
#define AR_IO_GPIO1_SWPORTA_DDR 0x80017104
#pragma Aux_register(0x80017104, name=>"io_gpio1_swporta_ddr")

// User extension aux register io_gpio1_inten
#define AR_IO_GPIO1_INTEN 0x80017130
#pragma Aux_register(0x80017130, name=>"io_gpio1_inten")

// User extension aux register io_gpio1_intmask
#define AR_IO_GPIO1_INTMASK 0x80017134
#pragma Aux_register(0x80017134, name=>"io_gpio1_intmask")

// User extension aux register io_gpio1_inttype_level
#define AR_IO_GPIO1_INTTYPE_LEVEL 0x80017138
#pragma Aux_register(0x80017138, name=>"io_gpio1_inttype_level")

// User extension aux register io_gpio1_int_polarity
#define AR_IO_GPIO1_INT_POLARITY 0x8001713c
#pragma Aux_register(0x8001713c, name=>"io_gpio1_int_polarity")

// User extension aux register io_gpio1_intstatus
#define AR_IO_GPIO1_INTSTATUS 0x80017140
#pragma Aux_register(0x80017140, name=>"io_gpio1_intstatus")

// User extension aux register io_gpio1_raw_intstatus
#define AR_IO_GPIO1_RAW_INTSTATUS 0x80017144
#pragma Aux_register(0x80017144, name=>"io_gpio1_raw_intstatus")

// User extension aux register io_gpio1_porta_eoi
#define AR_IO_GPIO1_PORTA_EOI 0x8001714c
#pragma Aux_register(0x8001714c, name=>"io_gpio1_porta_eoi")

// User extension aux register io_gpio1_ext_porta
#define AR_IO_GPIO1_EXT_PORTA 0x80017150
#pragma Aux_register(0x80017150, name=>"io_gpio1_ext_porta")

// User extension aux register io_gpio1_ls_sync
#define AR_IO_GPIO1_LS_SYNC 0x80017160
#pragma Aux_register(0x80017160, name=>"io_gpio1_ls_sync")

// User extension aux register io_gpio1_int_bothedge
#define AR_IO_GPIO1_INT_BOTHEDGE 0x80017168
#pragma Aux_register(0x80017168, name=>"io_gpio1_int_bothedge")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_GPIO2_PRESENT	1

// User extension aux register io_gpio2_debounce
#define AR_IO_GPIO2_DEBOUNCE 0x80017248
#pragma Aux_register(0x80017248, name=>"io_gpio2_debounce")

// User extension aux register io_gpio2_clken
#define AR_IO_GPIO2_CLKEN 0x80017280
#pragma Aux_register(0x80017280, name=>"io_gpio2_clken")

// User extension aux register io_gpio2_swporta_dr
#define AR_IO_GPIO2_SWPORTA_DR 0x80017200
#pragma Aux_register(0x80017200, name=>"io_gpio2_swporta_dr")

// User extension aux register io_gpio2_swporta_ddr
#define AR_IO_GPIO2_SWPORTA_DDR 0x80017204
#pragma Aux_register(0x80017204, name=>"io_gpio2_swporta_ddr")

// User extension aux register io_gpio2_inten
#define AR_IO_GPIO2_INTEN 0x80017230
#pragma Aux_register(0x80017230, name=>"io_gpio2_inten")

// User extension aux register io_gpio2_intmask
#define AR_IO_GPIO2_INTMASK 0x80017234
#pragma Aux_register(0x80017234, name=>"io_gpio2_intmask")

// User extension aux register io_gpio2_inttype_level
#define AR_IO_GPIO2_INTTYPE_LEVEL 0x80017238
#pragma Aux_register(0x80017238, name=>"io_gpio2_inttype_level")

// User extension aux register io_gpio2_int_polarity
#define AR_IO_GPIO2_INT_POLARITY 0x8001723c
#pragma Aux_register(0x8001723c, name=>"io_gpio2_int_polarity")

// User extension aux register io_gpio2_intstatus
#define AR_IO_GPIO2_INTSTATUS 0x80017240
#pragma Aux_register(0x80017240, name=>"io_gpio2_intstatus")

// User extension aux register io_gpio2_raw_intstatus
#define AR_IO_GPIO2_RAW_INTSTATUS 0x80017244
#pragma Aux_register(0x80017244, name=>"io_gpio2_raw_intstatus")

// User extension aux register io_gpio2_porta_eoi
#define AR_IO_GPIO2_PORTA_EOI 0x8001724c
#pragma Aux_register(0x8001724c, name=>"io_gpio2_porta_eoi")

// User extension aux register io_gpio2_ext_porta
#define AR_IO_GPIO2_EXT_PORTA 0x80017250
#pragma Aux_register(0x80017250, name=>"io_gpio2_ext_porta")

// User extension aux register io_gpio2_ls_sync
#define AR_IO_GPIO2_LS_SYNC 0x80017260
#pragma Aux_register(0x80017260, name=>"io_gpio2_ls_sync")

// User extension aux register io_gpio2_int_bothedge
#define AR_IO_GPIO2_INT_BOTHEDGE 0x80017268
#pragma Aux_register(0x80017268, name=>"io_gpio2_int_bothedge")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_I2C_MST1_PRESENT	1

// User extension aux register io_i2c_mst1_clken
#define AR_IO_I2C_MST1_CLKEN 0x800121c0
#pragma Aux_register(0x800121c0, name=>"io_i2c_mst1_clken")

// User extension aux register io_i2c_mst1_con
#define AR_IO_I2C_MST1_CON 0x80012100
#pragma Aux_register(0x80012100, name=>"io_i2c_mst1_con")

// User extension aux register io_i2c_mst1_tar
#define AR_IO_I2C_MST1_TAR 0x80012104
#pragma Aux_register(0x80012104, name=>"io_i2c_mst1_tar")

// User extension aux register io_i2c_mst1_data_cmd
#define AR_IO_I2C_MST1_DATA_CMD 0x80012110
#pragma Aux_register(0x80012110, name=>"io_i2c_mst1_data_cmd")

// User extension aux register io_i2c_mst1_ss_scl_hcnt
#define AR_IO_I2C_MST1_SS_SCL_HCNT 0x80012114
#pragma Aux_register(0x80012114, name=>"io_i2c_mst1_ss_scl_hcnt")

// User extension aux register io_i2c_mst1_ss_scl_lcnt
#define AR_IO_I2C_MST1_SS_SCL_LCNT 0x80012118
#pragma Aux_register(0x80012118, name=>"io_i2c_mst1_ss_scl_lcnt")

// User extension aux register io_i2c_mst1_fs_scl_hcnt
#define AR_IO_I2C_MST1_FS_SCL_HCNT 0x8001211c
#pragma Aux_register(0x8001211c, name=>"io_i2c_mst1_fs_scl_hcnt")

// User extension aux register io_i2c_mst1_fs_scl_lcnt
#define AR_IO_I2C_MST1_FS_SCL_LCNT 0x80012120
#pragma Aux_register(0x80012120, name=>"io_i2c_mst1_fs_scl_lcnt")

// User extension aux register io_i2c_mst1_intr_stat
#define AR_IO_I2C_MST1_INTR_STAT 0x8001212c
#pragma Aux_register(0x8001212c, name=>"io_i2c_mst1_intr_stat")

// User extension aux register io_i2c_mst1_intr_mask
#define AR_IO_I2C_MST1_INTR_MASK 0x80012130
#pragma Aux_register(0x80012130, name=>"io_i2c_mst1_intr_mask")

// User extension aux register io_i2c_mst1_raw_intr_stat
#define AR_IO_I2C_MST1_RAW_INTR_STAT 0x80012134
#pragma Aux_register(0x80012134, name=>"io_i2c_mst1_raw_intr_stat")

// User extension aux register io_i2c_mst1_rx_tl
#define AR_IO_I2C_MST1_RX_TL 0x80012138
#pragma Aux_register(0x80012138, name=>"io_i2c_mst1_rx_tl")

// User extension aux register io_i2c_mst1_tx_tl
#define AR_IO_I2C_MST1_TX_TL 0x8001213c
#pragma Aux_register(0x8001213c, name=>"io_i2c_mst1_tx_tl")

// User extension aux register io_i2c_mst1_clr_intr
#define AR_IO_I2C_MST1_CLR_INTR 0x80012140
#pragma Aux_register(0x80012140, name=>"io_i2c_mst1_clr_intr")

// User extension aux register io_i2c_mst1_clr_rx_under
#define AR_IO_I2C_MST1_CLR_RX_UNDER 0x80012144
#pragma Aux_register(0x80012144, name=>"io_i2c_mst1_clr_rx_under")

// User extension aux register io_i2c_mst1_clr_rx_over
#define AR_IO_I2C_MST1_CLR_RX_OVER 0x80012148
#pragma Aux_register(0x80012148, name=>"io_i2c_mst1_clr_rx_over")

// User extension aux register io_i2c_mst1_clr_tx_over
#define AR_IO_I2C_MST1_CLR_TX_OVER 0x8001214c
#pragma Aux_register(0x8001214c, name=>"io_i2c_mst1_clr_tx_over")

// User extension aux register io_i2c_mst1_clr_tx_abrt
#define AR_IO_I2C_MST1_CLR_TX_ABRT 0x80012154
#pragma Aux_register(0x80012154, name=>"io_i2c_mst1_clr_tx_abrt")

// User extension aux register io_i2c_mst1_clr_activity
#define AR_IO_I2C_MST1_CLR_ACTIVITY 0x8001215c
#pragma Aux_register(0x8001215c, name=>"io_i2c_mst1_clr_activity")

// User extension aux register io_i2c_mst1_clr_stop_det
#define AR_IO_I2C_MST1_CLR_STOP_DET 0x80012160
#pragma Aux_register(0x80012160, name=>"io_i2c_mst1_clr_stop_det")

// User extension aux register io_i2c_mst1_clr_start_det
#define AR_IO_I2C_MST1_CLR_START_DET 0x80012164
#pragma Aux_register(0x80012164, name=>"io_i2c_mst1_clr_start_det")

// User extension aux register io_i2c_mst1_enable
#define AR_IO_I2C_MST1_ENABLE 0x8001216c
#pragma Aux_register(0x8001216c, name=>"io_i2c_mst1_enable")

// User extension aux register io_i2c_mst1_status
#define AR_IO_I2C_MST1_STATUS 0x80012170
#pragma Aux_register(0x80012170, name=>"io_i2c_mst1_status")

// User extension aux register io_i2c_mst1_txflr
#define AR_IO_I2C_MST1_TXFLR 0x80012174
#pragma Aux_register(0x80012174, name=>"io_i2c_mst1_txflr")

// User extension aux register io_i2c_mst1_rxflr
#define AR_IO_I2C_MST1_RXFLR 0x80012178
#pragma Aux_register(0x80012178, name=>"io_i2c_mst1_rxflr")

// User extension aux register io_i2c_mst1_sda_hold
#define AR_IO_I2C_MST1_SDA_HOLD 0x8001217c
#pragma Aux_register(0x8001217c, name=>"io_i2c_mst1_sda_hold")

// User extension aux register io_i2c_mst1_tx_abrt_source
#define AR_IO_I2C_MST1_TX_ABRT_SOURCE 0x80012180
#pragma Aux_register(0x80012180, name=>"io_i2c_mst1_tx_abrt_source")

// User extension aux register io_i2c_mst1_enable_status
#define AR_IO_I2C_MST1_ENABLE_STATUS 0x8001219c
#pragma Aux_register(0x8001219c, name=>"io_i2c_mst1_enable_status")

// User extension aux register io_i2c_mst1_fs_spklen
#define AR_IO_I2C_MST1_FS_SPKLEN 0x800121a0
#pragma Aux_register(0x800121a0, name=>"io_i2c_mst1_fs_spklen")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_I2C_MST2_PRESENT	1

// User extension aux register io_i2c_mst2_clken
#define AR_IO_I2C_MST2_CLKEN 0x800122c0
#pragma Aux_register(0x800122c0, name=>"io_i2c_mst2_clken")

// User extension aux register io_i2c_mst2_con
#define AR_IO_I2C_MST2_CON 0x80012200
#pragma Aux_register(0x80012200, name=>"io_i2c_mst2_con")

// User extension aux register io_i2c_mst2_tar
#define AR_IO_I2C_MST2_TAR 0x80012204
#pragma Aux_register(0x80012204, name=>"io_i2c_mst2_tar")

// User extension aux register io_i2c_mst2_data_cmd
#define AR_IO_I2C_MST2_DATA_CMD 0x80012210
#pragma Aux_register(0x80012210, name=>"io_i2c_mst2_data_cmd")

// User extension aux register io_i2c_mst2_ss_scl_hcnt
#define AR_IO_I2C_MST2_SS_SCL_HCNT 0x80012214
#pragma Aux_register(0x80012214, name=>"io_i2c_mst2_ss_scl_hcnt")

// User extension aux register io_i2c_mst2_ss_scl_lcnt
#define AR_IO_I2C_MST2_SS_SCL_LCNT 0x80012218
#pragma Aux_register(0x80012218, name=>"io_i2c_mst2_ss_scl_lcnt")

// User extension aux register io_i2c_mst2_fs_scl_hcnt
#define AR_IO_I2C_MST2_FS_SCL_HCNT 0x8001221c
#pragma Aux_register(0x8001221c, name=>"io_i2c_mst2_fs_scl_hcnt")

// User extension aux register io_i2c_mst2_fs_scl_lcnt
#define AR_IO_I2C_MST2_FS_SCL_LCNT 0x80012220
#pragma Aux_register(0x80012220, name=>"io_i2c_mst2_fs_scl_lcnt")

// User extension aux register io_i2c_mst2_intr_stat
#define AR_IO_I2C_MST2_INTR_STAT 0x8001222c
#pragma Aux_register(0x8001222c, name=>"io_i2c_mst2_intr_stat")

// User extension aux register io_i2c_mst2_intr_mask
#define AR_IO_I2C_MST2_INTR_MASK 0x80012230
#pragma Aux_register(0x80012230, name=>"io_i2c_mst2_intr_mask")

// User extension aux register io_i2c_mst2_raw_intr_stat
#define AR_IO_I2C_MST2_RAW_INTR_STAT 0x80012234
#pragma Aux_register(0x80012234, name=>"io_i2c_mst2_raw_intr_stat")

// User extension aux register io_i2c_mst2_rx_tl
#define AR_IO_I2C_MST2_RX_TL 0x80012238
#pragma Aux_register(0x80012238, name=>"io_i2c_mst2_rx_tl")

// User extension aux register io_i2c_mst2_tx_tl
#define AR_IO_I2C_MST2_TX_TL 0x8001223c
#pragma Aux_register(0x8001223c, name=>"io_i2c_mst2_tx_tl")

// User extension aux register io_i2c_mst2_clr_intr
#define AR_IO_I2C_MST2_CLR_INTR 0x80012240
#pragma Aux_register(0x80012240, name=>"io_i2c_mst2_clr_intr")

// User extension aux register io_i2c_mst2_clr_rx_under
#define AR_IO_I2C_MST2_CLR_RX_UNDER 0x80012244
#pragma Aux_register(0x80012244, name=>"io_i2c_mst2_clr_rx_under")

// User extension aux register io_i2c_mst2_clr_rx_over
#define AR_IO_I2C_MST2_CLR_RX_OVER 0x80012248
#pragma Aux_register(0x80012248, name=>"io_i2c_mst2_clr_rx_over")

// User extension aux register io_i2c_mst2_clr_tx_over
#define AR_IO_I2C_MST2_CLR_TX_OVER 0x8001224c
#pragma Aux_register(0x8001224c, name=>"io_i2c_mst2_clr_tx_over")

// User extension aux register io_i2c_mst2_clr_tx_abrt
#define AR_IO_I2C_MST2_CLR_TX_ABRT 0x80012254
#pragma Aux_register(0x80012254, name=>"io_i2c_mst2_clr_tx_abrt")

// User extension aux register io_i2c_mst2_clr_activity
#define AR_IO_I2C_MST2_CLR_ACTIVITY 0x8001225c
#pragma Aux_register(0x8001225c, name=>"io_i2c_mst2_clr_activity")

// User extension aux register io_i2c_mst2_clr_stop_det
#define AR_IO_I2C_MST2_CLR_STOP_DET 0x80012260
#pragma Aux_register(0x80012260, name=>"io_i2c_mst2_clr_stop_det")

// User extension aux register io_i2c_mst2_clr_start_det
#define AR_IO_I2C_MST2_CLR_START_DET 0x80012264
#pragma Aux_register(0x80012264, name=>"io_i2c_mst2_clr_start_det")

// User extension aux register io_i2c_mst2_enable
#define AR_IO_I2C_MST2_ENABLE 0x8001226c
#pragma Aux_register(0x8001226c, name=>"io_i2c_mst2_enable")

// User extension aux register io_i2c_mst2_status
#define AR_IO_I2C_MST2_STATUS 0x80012270
#pragma Aux_register(0x80012270, name=>"io_i2c_mst2_status")

// User extension aux register io_i2c_mst2_txflr
#define AR_IO_I2C_MST2_TXFLR 0x80012274
#pragma Aux_register(0x80012274, name=>"io_i2c_mst2_txflr")

// User extension aux register io_i2c_mst2_rxflr
#define AR_IO_I2C_MST2_RXFLR 0x80012278
#pragma Aux_register(0x80012278, name=>"io_i2c_mst2_rxflr")

// User extension aux register io_i2c_mst2_sda_hold
#define AR_IO_I2C_MST2_SDA_HOLD 0x8001227c
#pragma Aux_register(0x8001227c, name=>"io_i2c_mst2_sda_hold")

// User extension aux register io_i2c_mst2_tx_abrt_source
#define AR_IO_I2C_MST2_TX_ABRT_SOURCE 0x80012280
#pragma Aux_register(0x80012280, name=>"io_i2c_mst2_tx_abrt_source")

// User extension aux register io_i2c_mst2_enable_status
#define AR_IO_I2C_MST2_ENABLE_STATUS 0x8001229c
#pragma Aux_register(0x8001229c, name=>"io_i2c_mst2_enable_status")

// User extension aux register io_i2c_mst2_fs_spklen
#define AR_IO_I2C_MST2_FS_SPKLEN 0x800122a0
#pragma Aux_register(0x800122a0, name=>"io_i2c_mst2_fs_spklen")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_UART0_PRESENT	1

// User extension aux register io_uart0_clken
#define AR_IO_UART0_CLKEN 0x800140c0
#pragma Aux_register(0x800140c0, name=>"io_uart0_clken")

// User extension aux register io_uart0_rbr_thr_dll
#define AR_IO_UART0_RBR_THR_DLL 0x80014000
#pragma Aux_register(0x80014000, name=>"io_uart0_rbr_thr_dll")

// User extension aux register io_uart0_ier_dlh
#define AR_IO_UART0_IER_DLH 0x80014004
#pragma Aux_register(0x80014004, name=>"io_uart0_ier_dlh")

// User extension aux register io_uart0_iir_fcr
#define AR_IO_UART0_IIR_FCR 0x80014008
#pragma Aux_register(0x80014008, name=>"io_uart0_iir_fcr")

// User extension aux register io_uart0_lcr
#define AR_IO_UART0_LCR 0x8001400c
#pragma Aux_register(0x8001400c, name=>"io_uart0_lcr")

// User extension aux register io_uart0_mcr
#define AR_IO_UART0_MCR 0x80014010
#pragma Aux_register(0x80014010, name=>"io_uart0_mcr")

// User extension aux register io_uart0_lsr
#define AR_IO_UART0_LSR 0x80014014
#pragma Aux_register(0x80014014, name=>"io_uart0_lsr")

// User extension aux register io_uart0_msr
#define AR_IO_UART0_MSR 0x80014018
#pragma Aux_register(0x80014018, name=>"io_uart0_msr")

// User extension aux register io_uart0_usr
#define AR_IO_UART0_USR 0x8001407c
#pragma Aux_register(0x8001407c, name=>"io_uart0_usr")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_UART1_PRESENT	1

// User extension aux register io_uart1_clken
#define AR_IO_UART1_CLKEN 0x800141c0
#pragma Aux_register(0x800141c0, name=>"io_uart1_clken")

// User extension aux register io_uart1_rbr_thr_dll
#define AR_IO_UART1_RBR_THR_DLL 0x80014100
#pragma Aux_register(0x80014100, name=>"io_uart1_rbr_thr_dll")

// User extension aux register io_uart1_ier_dlh
#define AR_IO_UART1_IER_DLH 0x80014104
#pragma Aux_register(0x80014104, name=>"io_uart1_ier_dlh")

// User extension aux register io_uart1_iir_fcr
#define AR_IO_UART1_IIR_FCR 0x80014108
#pragma Aux_register(0x80014108, name=>"io_uart1_iir_fcr")

// User extension aux register io_uart1_lcr
#define AR_IO_UART1_LCR 0x8001410c
#pragma Aux_register(0x8001410c, name=>"io_uart1_lcr")

// User extension aux register io_uart1_mcr
#define AR_IO_UART1_MCR 0x80014110
#pragma Aux_register(0x80014110, name=>"io_uart1_mcr")

// User extension aux register io_uart1_lsr
#define AR_IO_UART1_LSR 0x80014114
#pragma Aux_register(0x80014114, name=>"io_uart1_lsr")

// User extension aux register io_uart1_msr
#define AR_IO_UART1_MSR 0x80014118
#pragma Aux_register(0x80014118, name=>"io_uart1_msr")

// User extension aux register io_uart1_usr
#define AR_IO_UART1_USR 0x8001417c
#pragma Aux_register(0x8001417c, name=>"io_uart1_usr")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_UART2_PRESENT	1

// User extension aux register io_uart2_clken
#define AR_IO_UART2_CLKEN 0x800142c0
#pragma Aux_register(0x800142c0, name=>"io_uart2_clken")

// User extension aux register io_uart2_rbr_thr_dll
#define AR_IO_UART2_RBR_THR_DLL 0x80014200
#pragma Aux_register(0x80014200, name=>"io_uart2_rbr_thr_dll")

// User extension aux register io_uart2_ier_dlh
#define AR_IO_UART2_IER_DLH 0x80014204
#pragma Aux_register(0x80014204, name=>"io_uart2_ier_dlh")

// User extension aux register io_uart2_iir_fcr
#define AR_IO_UART2_IIR_FCR 0x80014208
#pragma Aux_register(0x80014208, name=>"io_uart2_iir_fcr")

// User extension aux register io_uart2_lcr
#define AR_IO_UART2_LCR 0x8001420c
#pragma Aux_register(0x8001420c, name=>"io_uart2_lcr")

// User extension aux register io_uart2_mcr
#define AR_IO_UART2_MCR 0x80014210
#pragma Aux_register(0x80014210, name=>"io_uart2_mcr")

// User extension aux register io_uart2_lsr
#define AR_IO_UART2_LSR 0x80014214
#pragma Aux_register(0x80014214, name=>"io_uart2_lsr")

// User extension aux register io_uart2_msr
#define AR_IO_UART2_MSR 0x80014218
#pragma Aux_register(0x80014218, name=>"io_uart2_msr")

// User extension aux register io_uart2_usr
#define AR_IO_UART2_USR 0x8001427c
#pragma Aux_register(0x8001427c, name=>"io_uart2_usr")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_UART3_PRESENT	1

// User extension aux register io_uart3_clken
#define AR_IO_UART3_CLKEN 0x800143c0
#pragma Aux_register(0x800143c0, name=>"io_uart3_clken")

// User extension aux register io_uart3_rbr_thr_dll
#define AR_IO_UART3_RBR_THR_DLL 0x80014300
#pragma Aux_register(0x80014300, name=>"io_uart3_rbr_thr_dll")

// User extension aux register io_uart3_ier_dlh
#define AR_IO_UART3_IER_DLH 0x80014304
#pragma Aux_register(0x80014304, name=>"io_uart3_ier_dlh")

// User extension aux register io_uart3_iir_fcr
#define AR_IO_UART3_IIR_FCR 0x80014308
#pragma Aux_register(0x80014308, name=>"io_uart3_iir_fcr")

// User extension aux register io_uart3_lcr
#define AR_IO_UART3_LCR 0x8001430c
#pragma Aux_register(0x8001430c, name=>"io_uart3_lcr")

// User extension aux register io_uart3_mcr
#define AR_IO_UART3_MCR 0x80014310
#pragma Aux_register(0x80014310, name=>"io_uart3_mcr")

// User extension aux register io_uart3_lsr
#define AR_IO_UART3_LSR 0x80014314
#pragma Aux_register(0x80014314, name=>"io_uart3_lsr")

// User extension aux register io_uart3_msr
#define AR_IO_UART3_MSR 0x80014318
#pragma Aux_register(0x80014318, name=>"io_uart3_msr")

// User extension aux register io_uart3_usr
#define AR_IO_UART3_USR 0x8001437c
#pragma Aux_register(0x8001437c, name=>"io_uart3_usr")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_I2S_RX_MST0_PRESENT	1

// User extension aux register io_i2s_rx_mst0_ier
#define AR_IO_I2S_RX_MST0_IER 0x8001a000
#pragma Aux_register(0x8001a000, name=>"io_i2s_rx_mst0_ier")

// User extension aux register io_i2s_rx_mst0_irer
#define AR_IO_I2S_RX_MST0_IRER 0x8001a004
#pragma Aux_register(0x8001a004, name=>"io_i2s_rx_mst0_irer")

// User extension aux register io_i2s_rx_mst0_cer
#define AR_IO_I2S_RX_MST0_CER 0x8001a00c
#pragma Aux_register(0x8001a00c, name=>"io_i2s_rx_mst0_cer")

// User extension aux register io_i2s_rx_mst0_ccr
#define AR_IO_I2S_RX_MST0_CCR 0x8001a010
#pragma Aux_register(0x8001a010, name=>"io_i2s_rx_mst0_ccr")

// User extension aux register io_i2s_rx_mst0_rxffr
#define AR_IO_I2S_RX_MST0_RXFFR 0x8001a014
#pragma Aux_register(0x8001a014, name=>"io_i2s_rx_mst0_rxffr")

// User extension aux register io_i2s_rx_mst0_lrbr
#define AR_IO_I2S_RX_MST0_LRBR 0x8001a020
#pragma Aux_register(0x8001a020, name=>"io_i2s_rx_mst0_lrbr")

// User extension aux register io_i2s_rx_mst0_rrbr
#define AR_IO_I2S_RX_MST0_RRBR 0x8001a024
#pragma Aux_register(0x8001a024, name=>"io_i2s_rx_mst0_rrbr")

// User extension aux register io_i2s_rx_mst0_rer
#define AR_IO_I2S_RX_MST0_RER 0x8001a028
#pragma Aux_register(0x8001a028, name=>"io_i2s_rx_mst0_rer")

// User extension aux register io_i2s_rx_mst0_rcr
#define AR_IO_I2S_RX_MST0_RCR 0x8001a030
#pragma Aux_register(0x8001a030, name=>"io_i2s_rx_mst0_rcr")

// User extension aux register io_i2s_rx_mst0_isr
#define AR_IO_I2S_RX_MST0_ISR 0x8001a038
#pragma Aux_register(0x8001a038, name=>"io_i2s_rx_mst0_isr")

// User extension aux register io_i2s_rx_mst0_imr
#define AR_IO_I2S_RX_MST0_IMR 0x8001a03c
#pragma Aux_register(0x8001a03c, name=>"io_i2s_rx_mst0_imr")

// User extension aux register io_i2s_rx_mst0_ror
#define AR_IO_I2S_RX_MST0_ROR 0x8001a040
#pragma Aux_register(0x8001a040, name=>"io_i2s_rx_mst0_ror")

// User extension aux register io_i2s_rx_mst0_rfcr
#define AR_IO_I2S_RX_MST0_RFCR 0x8001a048
#pragma Aux_register(0x8001a048, name=>"io_i2s_rx_mst0_rfcr")

// User extension aux register io_i2s_rx_mst0_rff
#define AR_IO_I2S_RX_MST0_RFF 0x8001a050
#pragma Aux_register(0x8001a050, name=>"io_i2s_rx_mst0_rff")

// User extension aux register io_i2s_rx_mst0_rxdma
#define AR_IO_I2S_RX_MST0_RXDMA 0x8001a1c0
#pragma Aux_register(0x8001a1c0, name=>"io_i2s_rx_mst0_rxdma")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_I2S_TX_MST0_PRESENT	1

// User extension aux register io_i2s_tx_mst0_ier
#define AR_IO_I2S_TX_MST0_IER 0x80019000
#pragma Aux_register(0x80019000, name=>"io_i2s_tx_mst0_ier")

// User extension aux register io_i2s_tx_mst0_iter
#define AR_IO_I2S_TX_MST0_ITER 0x80019008
#pragma Aux_register(0x80019008, name=>"io_i2s_tx_mst0_iter")

// User extension aux register io_i2s_tx_mst0_cer
#define AR_IO_I2S_TX_MST0_CER 0x8001900c
#pragma Aux_register(0x8001900c, name=>"io_i2s_tx_mst0_cer")

// User extension aux register io_i2s_tx_mst0_ccr
#define AR_IO_I2S_TX_MST0_CCR 0x80019010
#pragma Aux_register(0x80019010, name=>"io_i2s_tx_mst0_ccr")

// User extension aux register io_i2s_tx_mst0_txffr
#define AR_IO_I2S_TX_MST0_TXFFR 0x80019018
#pragma Aux_register(0x80019018, name=>"io_i2s_tx_mst0_txffr")

// User extension aux register io_i2s_tx_mst0_lthr
#define AR_IO_I2S_TX_MST0_LTHR 0x80019020
#pragma Aux_register(0x80019020, name=>"io_i2s_tx_mst0_lthr")

// User extension aux register io_i2s_tx_mst0_rthr
#define AR_IO_I2S_TX_MST0_RTHR 0x80019024
#pragma Aux_register(0x80019024, name=>"io_i2s_tx_mst0_rthr")

// User extension aux register io_i2s_tx_mst0_ter
#define AR_IO_I2S_TX_MST0_TER 0x8001902c
#pragma Aux_register(0x8001902c, name=>"io_i2s_tx_mst0_ter")

// User extension aux register io_i2s_tx_mst0_tcr
#define AR_IO_I2S_TX_MST0_TCR 0x80019034
#pragma Aux_register(0x80019034, name=>"io_i2s_tx_mst0_tcr")

// User extension aux register io_i2s_tx_mst0_isr
#define AR_IO_I2S_TX_MST0_ISR 0x80019038
#pragma Aux_register(0x80019038, name=>"io_i2s_tx_mst0_isr")

// User extension aux register io_i2s_tx_mst0_imr
#define AR_IO_I2S_TX_MST0_IMR 0x8001903c
#pragma Aux_register(0x8001903c, name=>"io_i2s_tx_mst0_imr")

// User extension aux register io_i2s_tx_mst0_tor
#define AR_IO_I2S_TX_MST0_TOR 0x80019044
#pragma Aux_register(0x80019044, name=>"io_i2s_tx_mst0_tor")

// User extension aux register io_i2s_tx_mst0_tfcr
#define AR_IO_I2S_TX_MST0_TFCR 0x8001904c
#pragma Aux_register(0x8001904c, name=>"io_i2s_tx_mst0_tfcr")

// User extension aux register io_i2s_tx_mst0_tff
#define AR_IO_I2S_TX_MST0_TFF 0x80019054
#pragma Aux_register(0x80019054, name=>"io_i2s_tx_mst0_tff")

// User extension aux register io_i2s_tx_mst0_txdma
#define AR_IO_I2S_TX_MST0_TXDMA 0x800191c8
#pragma Aux_register(0x800191c8, name=>"io_i2s_tx_mst0_txdma")
#define APEX_COM_ARC_HARDWARE_DFSS_IO_PDM_RX0_PRESENT	1

// User extension aux register io_pdm_rx0_pdm_en
#define AR_IO_PDM_RX0_PDM_EN 0x8001b000
#pragma Aux_register(0x8001b000, name=>"io_pdm_rx0_pdm_en")

// User extension aux register io_pdm_rx0_pdm_ren
#define AR_IO_PDM_RX0_PDM_REN 0x8001b004
#pragma Aux_register(0x8001b004, name=>"io_pdm_rx0_pdm_ren")

// User extension aux register io_pdm_rx0_cer
#define AR_IO_PDM_RX0_CER 0x8001b00c
#pragma Aux_register(0x8001b00c, name=>"io_pdm_rx0_cer")

// User extension aux register io_pdm_rx0_rxffr
#define AR_IO_PDM_RX0_RXFFR 0x8001b014
#pragma Aux_register(0x8001b014, name=>"io_pdm_rx0_rxffr")

// User extension aux register io_pdm_rx0_rer0
#define AR_IO_PDM_RX0_RER0 0x8001b028
#pragma Aux_register(0x8001b028, name=>"io_pdm_rx0_rer0")

// User extension aux register io_pdm_rx0_isr
#define AR_IO_PDM_RX0_ISR 0x8001b038
#pragma Aux_register(0x8001b038, name=>"io_pdm_rx0_isr")

// User extension aux register io_pdm_rx0_imr
#define AR_IO_PDM_RX0_IMR 0x8001b03c
#pragma Aux_register(0x8001b03c, name=>"io_pdm_rx0_imr")

// User extension aux register io_pdm_rx0_ror
#define AR_IO_PDM_RX0_ROR 0x8001b040
#pragma Aux_register(0x8001b040, name=>"io_pdm_rx0_ror")

// User extension aux register io_pdm_rx0_rfcr
#define AR_IO_PDM_RX0_RFCR 0x8001b048
#pragma Aux_register(0x8001b048, name=>"io_pdm_rx0_rfcr")

// User extension aux register io_pdm_rx0_rxdma
#define AR_IO_PDM_RX0_RXDMA 0x8001b1c0
#pragma Aux_register(0x8001b1c0, name=>"io_pdm_rx0_rxdma")

// User extension aux register io_pdm_rx0_pdm_rr
#define AR_IO_PDM_RX0_PDM_RR 0x8001b1d0
#pragma Aux_register(0x8001b1d0, name=>"io_pdm_rx0_pdm_rr")

// User extension aux register io_pdm_rx0_cic_n
#define AR_IO_PDM_RX0_CIC_N 0x8001b1d4
#pragma Aux_register(0x8001b1d4, name=>"io_pdm_rx0_cic_n")

// User extension aux register io_pdm_rx0_cic_d
#define AR_IO_PDM_RX0_CIC_D 0x8001b1d8
#pragma Aux_register(0x8001b1d8, name=>"io_pdm_rx0_cic_d")

// User extension aux register io_pdm_rx0_dcrc
#define AR_IO_PDM_RX0_DCRC 0x8001b1dc
#pragma Aux_register(0x8001b1dc, name=>"io_pdm_rx0_dcrc")

// User extension aux register io_pdm_rx0_brc_b0
#define AR_IO_PDM_RX0_BRC_B0 0x8001b1e0
#pragma Aux_register(0x8001b1e0, name=>"io_pdm_rx0_brc_b0")

// User extension aux register io_pdm_rx0_brc_clp
#define AR_IO_PDM_RX0_BRC_CLP 0x8001b1f0
#pragma Aux_register(0x8001b1f0, name=>"io_pdm_rx0_brc_clp")
#define APEX_COM_ARC_HARDWARE_FLOATING_POINT_UNIT_FPU_PRESENT	1

// User extension aux register fpu_build
#define AR_FPU_BUILD 0xc8
#pragma Aux_register(0xc8, name=>"fpu_build")

// User extension aux register fpu_ctrl
#define AR_FPU_CTRL 0x300
#pragma Aux_register(0x300, name=>"fpu_ctrl")

// User extension aux register fpu_status
#define AR_FPU_STATUS 0x301
#pragma Aux_register(0x301, name=>"fpu_status")

// User extension instruction fsmadd
extern int fsmadd(int,int);
#pragma intrinsic(fsmadd,opcode=>6,sub_opcode=>5, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fsmsub
extern int fsmsub(int,int);
#pragma intrinsic(fsmsub,opcode=>6,sub_opcode=>6, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fsmul
extern int fsmul(int,int);
#pragma intrinsic(fsmul,opcode=>6,sub_opcode=>0, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fsadd
extern int fsadd(int,int);
#pragma intrinsic(fsadd,opcode=>6,sub_opcode=>1, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fssub
extern int fssub(int,int);
#pragma intrinsic(fssub,opcode=>6,sub_opcode=>2, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fcvt32
extern int fcvt32(int,int);
#pragma intrinsic(fcvt32,opcode=>6,sub_opcode=>8, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fsdiv
extern int fsdiv(int,int);
#pragma intrinsic(fsdiv,opcode=>6,sub_opcode=>7, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fscmp
extern int fscmp(int,int);
#pragma intrinsic(fscmp,opcode=>6,sub_opcode=>3, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fscmp
extern int fscmp_f(int,int);
#pragma intrinsic(fscmp_f,opcode=>6,sub_opcode=>3, set_flags => 1, flags => "zncv", effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fscmpf
extern int fscmpf(int,int);
#pragma intrinsic(fscmpf,opcode=>6,sub_opcode=>4, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fscmpf
extern int fscmpf_f(int,int);
#pragma intrinsic(fscmpf_f,opcode=>6,sub_opcode=>4, set_flags => 1, flags => "zncv", effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")

// User extension instruction fssqrt
extern int fssqrt(int);
#pragma intrinsic(fssqrt,opcode=>6,sub_opcode=>0, effects=>"auxreg=0xc8:is_read:is_written; auxreg=0x300:is_read:is_written; auxreg=0x301:is_read:is_written")
#define APEX_COM_ARC_HARDWARE_FLOATING_POINT_UNIT_FPU_DP_ASSIST_PRESENT	1

// User extension aux register aux_dpfp1l
#define AR_AUX_DPFP1L 0x302
#pragma Aux_register(0x302, name=>"aux_dpfp1l")

// User extension aux register aux_dpfp1h
#define AR_AUX_DPFP1H 0x303
#pragma Aux_register(0x303, name=>"aux_dpfp1h")

// User extension aux register aux_dpfp2l
#define AR_AUX_DPFP2L 0x304
#pragma Aux_register(0x304, name=>"aux_dpfp2l")

// User extension aux register aux_dpfp2h
#define AR_AUX_DPFP2H 0x305
#pragma Aux_register(0x305, name=>"aux_dpfp2h")

// User extension instruction dmulh11
extern int dmulh11(int,int);
#pragma intrinsic(dmulh11,opcode=>6,sub_opcode=>48,blocking_cycles=> 7, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dmulh11
extern int dmulh11_f(int,int);
#pragma intrinsic(dmulh11_f,opcode=>6,sub_opcode=>48, set_flags => 1, flags => "zncv",blocking_cycles=> 7, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dmulh12
extern int dmulh12(int,int);
#pragma intrinsic(dmulh12,opcode=>6,sub_opcode=>49,blocking_cycles=> 7, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dmulh12
extern int dmulh12_f(int,int);
#pragma intrinsic(dmulh12_f,opcode=>6,sub_opcode=>49, set_flags => 1, flags => "zncv",blocking_cycles=> 7, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dmulh21
extern int dmulh21(int,int);
#pragma intrinsic(dmulh21,opcode=>6,sub_opcode=>50,blocking_cycles=> 7, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dmulh21
extern int dmulh21_f(int,int);
#pragma intrinsic(dmulh21_f,opcode=>6,sub_opcode=>50, set_flags => 1, flags => "zncv",blocking_cycles=> 7, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dmulh22
extern int dmulh22(int,int);
#pragma intrinsic(dmulh22,opcode=>6,sub_opcode=>51,blocking_cycles=> 7, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dmulh22
extern int dmulh22_f(int,int);
#pragma intrinsic(dmulh22_f,opcode=>6,sub_opcode=>51, set_flags => 1, flags => "zncv",blocking_cycles=> 7, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction daddh11
extern int daddh11(int,int);
#pragma intrinsic(daddh11,opcode=>6,sub_opcode=>52,blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction daddh11
extern int daddh11_f(int,int);
#pragma intrinsic(daddh11_f,opcode=>6,sub_opcode=>52, set_flags => 1, flags => "zncv",blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction daddh12
extern int daddh12(int,int);
#pragma intrinsic(daddh12,opcode=>6,sub_opcode=>53,blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction daddh12
extern int daddh12_f(int,int);
#pragma intrinsic(daddh12_f,opcode=>6,sub_opcode=>53, set_flags => 1, flags => "zncv",blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction daddh21
extern int daddh21(int,int);
#pragma intrinsic(daddh21,opcode=>6,sub_opcode=>54,blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction daddh21
extern int daddh21_f(int,int);
#pragma intrinsic(daddh21_f,opcode=>6,sub_opcode=>54, set_flags => 1, flags => "zncv",blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction daddh22
extern int daddh22(int,int);
#pragma intrinsic(daddh22,opcode=>6,sub_opcode=>55,blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction daddh22
extern int daddh22_f(int,int);
#pragma intrinsic(daddh22_f,opcode=>6,sub_opcode=>55, set_flags => 1, flags => "zncv",blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dsubh11
extern int dsubh11(int,int);
#pragma intrinsic(dsubh11,opcode=>6,sub_opcode=>56,blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dsubh11
extern int dsubh11_f(int,int);
#pragma intrinsic(dsubh11_f,opcode=>6,sub_opcode=>56, set_flags => 1, flags => "zncv",blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dsubh12
extern int dsubh12(int,int);
#pragma intrinsic(dsubh12,opcode=>6,sub_opcode=>57,blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dsubh12
extern int dsubh12_f(int,int);
#pragma intrinsic(dsubh12_f,opcode=>6,sub_opcode=>57, set_flags => 1, flags => "zncv",blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dsubh21
extern int dsubh21(int,int);
#pragma intrinsic(dsubh21,opcode=>6,sub_opcode=>58,blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dsubh21
extern int dsubh21_f(int,int);
#pragma intrinsic(dsubh21_f,opcode=>6,sub_opcode=>58, set_flags => 1, flags => "zncv",blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dsubh22
extern int dsubh22(int,int);
#pragma intrinsic(dsubh22,opcode=>6,sub_opcode=>59,blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dsubh22
extern int dsubh22_f(int,int);
#pragma intrinsic(dsubh22_f,opcode=>6,sub_opcode=>59, set_flags => 1, flags => "zncv",blocking_cycles=> 5, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dexcl1
extern int dexcl1(int,int);
#pragma intrinsic(dexcl1,opcode=>6,sub_opcode=>60, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")

// User extension instruction dexcl2
extern int dexcl2(int,int);
#pragma intrinsic(dexcl2,opcode=>6,sub_opcode=>61, effects=>"auxreg=0x302:is_read:is_written; auxreg=0x303:is_read:is_written; auxreg=0x304:is_read:is_written; auxreg=0x305:is_read:is_written")


#endif


]]></string>
  </configuration>
  <configuration name="apex_assembly" filename="apexextensions.s">
    <string><![CDATA[

; Assembler directives for eia extensions in this design
.set apex_com_arc_hardware_dfss_dsp_trig_present,1
.extInstruction dsp_cos, 7, 0x1E, FLAGS_NONE, SYNTAX_2OP
.extInstruction dsp_sin, 7, 0x1F, FLAGS_NONE, SYNTAX_2OP
.extInstruction dsp_tan, 7, 0x22, FLAGS_NONE, SYNTAX_2OP
.extInstruction dsp_acos, 7, 0x23, FLAGS_NONE, SYNTAX_2OP
.extInstruction dsp_asin, 7, 0x24, FLAGS_NONE, SYNTAX_2OP
.extInstruction dsp_atan, 7, 0x25, FLAGS_NONE, SYNTAX_2OP
.extInstruction dsp_sqrt, 7, 0x20, FLAGS_NONE, SYNTAX_2OP
.extInstruction dsp_sqrt15, 7, 0x21, FLAGS_NONE, SYNTAX_2OP
 .set apex_com_arc_hardware_dfss_io_gpio0_present,1
 .set apex_com_arc_hardware_dfss_io_i2c_mst0_present,1
 .set apex_com_arc_hardware_dfss_io_i2c_slv0_present,1
 .set apex_com_arc_hardware_dfss_io_spi_mst0_present,1
 .set apex_com_arc_hardware_dfss_subsys_bcr_present,1
 .set apex_com_arc_hardware_dfss_io_spi_mst1_present,1
 .set apex_com_arc_hardware_dfss_io_spi_mst2_present,1
 .set apex_com_arc_hardware_dfss_io_spi_slv0_present,1
 .set apex_com_arc_hardware_dfss_io_gpio1_present,1
 .set apex_com_arc_hardware_dfss_io_gpio2_present,1
 .set apex_com_arc_hardware_dfss_io_i2c_mst1_present,1
 .set apex_com_arc_hardware_dfss_io_i2c_mst2_present,1
 .set apex_com_arc_hardware_dfss_io_uart0_present,1
 .set apex_com_arc_hardware_dfss_io_uart1_present,1
 .set apex_com_arc_hardware_dfss_io_uart2_present,1
 .set apex_com_arc_hardware_dfss_io_uart3_present,1
 .set apex_com_arc_hardware_dfss_io_i2s_rx_mst0_present,1
 .set apex_com_arc_hardware_dfss_io_i2s_tx_mst0_present,1
 .set apex_com_arc_hardware_dfss_io_pdm_rx0_present,1
.set apex_com_arc_hardware_dfss_io_gpio0_present,1
.extAuxRegister io_gpio0_debounce,0x80017048,r|w
.extAuxRegister io_gpio0_clken,0x80017080,r|w
.extAuxRegister io_gpio0_swporta_dr,0x80017000,r|w
.extAuxRegister io_gpio0_swporta_ddr,0x80017004,r|w
.extAuxRegister io_gpio0_inten,0x80017030,r|w
.extAuxRegister io_gpio0_intmask,0x80017034,r|w
.extAuxRegister io_gpio0_inttype_level,0x80017038,r|w
.extAuxRegister io_gpio0_int_polarity,0x8001703c,r|w
.extAuxRegister io_gpio0_intstatus,0x80017040,r
.extAuxRegister io_gpio0_raw_intstatus,0x80017044,r
.extAuxRegister io_gpio0_porta_eoi,0x8001704c,w
.extAuxRegister io_gpio0_ext_porta,0x80017050,r
.extAuxRegister io_gpio0_ls_sync,0x80017060,r|w
.extAuxRegister io_gpio0_int_bothedge,0x80017068,r|w
.set apex_com_arc_hardware_dfss_io_i2c_mst0_present,1
.extAuxRegister io_i2c_mst0_clken,0x800120c0,r|w
.extAuxRegister io_i2c_mst0_con,0x80012000,r|w
.extAuxRegister io_i2c_mst0_tar,0x80012004,r|w
.extAuxRegister io_i2c_mst0_data_cmd,0x80012010,r|w
.extAuxRegister io_i2c_mst0_ss_scl_hcnt,0x80012014,r|w
.extAuxRegister io_i2c_mst0_ss_scl_lcnt,0x80012018,r|w
.extAuxRegister io_i2c_mst0_fs_scl_hcnt,0x8001201c,r|w
.extAuxRegister io_i2c_mst0_fs_scl_lcnt,0x80012020,r|w
.extAuxRegister io_i2c_mst0_intr_stat,0x8001202c,r
.extAuxRegister io_i2c_mst0_intr_mask,0x80012030,r|w
.extAuxRegister io_i2c_mst0_raw_intr_stat,0x80012034,r
.extAuxRegister io_i2c_mst0_rx_tl,0x80012038,r|w
.extAuxRegister io_i2c_mst0_tx_tl,0x8001203c,r|w
.extAuxRegister io_i2c_mst0_clr_intr,0x80012040,r
.extAuxRegister io_i2c_mst0_clr_rx_under,0x80012044,r
.extAuxRegister io_i2c_mst0_clr_rx_over,0x80012048,r
.extAuxRegister io_i2c_mst0_clr_tx_over,0x8001204c,r
.extAuxRegister io_i2c_mst0_clr_tx_abrt,0x80012054,r
.extAuxRegister io_i2c_mst0_clr_activity,0x8001205c,r
.extAuxRegister io_i2c_mst0_clr_stop_det,0x80012060,r
.extAuxRegister io_i2c_mst0_clr_start_det,0x80012064,r
.extAuxRegister io_i2c_mst0_enable,0x8001206c,r|w
.extAuxRegister io_i2c_mst0_status,0x80012070,r
.extAuxRegister io_i2c_mst0_txflr,0x80012074,r
.extAuxRegister io_i2c_mst0_rxflr,0x80012078,r
.extAuxRegister io_i2c_mst0_sda_hold,0x8001207c,r|w
.extAuxRegister io_i2c_mst0_tx_abrt_source,0x80012080,r
.extAuxRegister io_i2c_mst0_enable_status,0x8001209c,r
.extAuxRegister io_i2c_mst0_fs_spklen,0x800120a0,r|w
.set apex_com_arc_hardware_dfss_io_i2c_slv0_present,1
.extAuxRegister io_i2c_slv0_clken,0x800130c0,r|w
.extAuxRegister io_i2c_slv0_con,0x80013000,r|w
.extAuxRegister io_i2c_slv0_sar,0x80013008,r|w
.extAuxRegister io_i2c_slv0_data_cmd,0x80013010,r|w
.extAuxRegister io_i2c_slv0_intr_stat,0x8001302c,r
.extAuxRegister io_i2c_slv0_intr_mask,0x80013030,r|w
.extAuxRegister io_i2c_slv0_raw_intr_stat,0x80013034,r
.extAuxRegister io_i2c_slv0_rx_tl,0x80013038,r|w
.extAuxRegister io_i2c_slv0_tx_tl,0x8001303c,r|w
.extAuxRegister io_i2c_slv0_clr_intr,0x80013040,r
.extAuxRegister io_i2c_slv0_clr_rx_under,0x80013044,r
.extAuxRegister io_i2c_slv0_clr_rx_over,0x80013048,r
.extAuxRegister io_i2c_slv0_clr_tx_over,0x8001304c,r
.extAuxRegister io_i2c_slv0_clr_rd_req,0x80013050,r
.extAuxRegister io_i2c_slv0_clr_tx_abrt,0x80013054,r
.extAuxRegister io_i2c_slv0_clr_rx_done,0x80013058,r
.extAuxRegister io_i2c_slv0_clr_activity,0x8001305c,r
.extAuxRegister io_i2c_slv0_clr_stop_det,0x80013060,r
.extAuxRegister io_i2c_slv0_clr_start_det,0x80013064,r
.extAuxRegister io_i2c_slv0_enable,0x8001306c,r|w
.extAuxRegister io_i2c_slv0_status,0x80013070,r
.extAuxRegister io_i2c_slv0_txflr,0x80013074,r
.extAuxRegister io_i2c_slv0_rxflr,0x80013078,r
.extAuxRegister io_i2c_slv0_sda_hold,0x8001307c,r|w
.extAuxRegister io_i2c_slv0_tx_abrt_source,0x80013080,r
.extAuxRegister io_i2c_slv0_sda_setup,0x80013094,r|w
.extAuxRegister io_i2c_slv0_enable_status,0x8001309c,r
.extAuxRegister io_i2c_slv0_fs_spklen,0x800130a0,r|w
.extAuxRegister io_i2c_slv0_clr_restart_det,0x800130a8,r
.set apex_com_arc_hardware_dfss_io_spi_mst0_present,1
.extAuxRegister io_spi_mst0_ctrlr0,0x80010000,r|w
.extAuxRegister io_spi_mst0_ctrlr1,0x80010001,r|w
.extAuxRegister io_spi_mst0_spien,0x80010002,r|w
.extAuxRegister io_spi_mst0_ser,0x80010004,r|w
.extAuxRegister io_spi_mst0_baudr,0x80010005,r|w
.extAuxRegister io_spi_mst0_txftlr,0x80010006,r|w
.extAuxRegister io_spi_mst0_rxftlr,0x80010007,r|w
.extAuxRegister io_spi_mst0_txflr,0x80010008,r
.extAuxRegister io_spi_mst0_rxflr,0x80010009,r
.extAuxRegister io_spi_mst0_sr,0x8001000a,r
.extAuxRegister io_spi_mst0_imr,0x8001000b,r|w
.extAuxRegister io_spi_mst0_isr,0x8001000c,r
.extAuxRegister io_spi_mst0_risr,0x8001000d,r
.extAuxRegister io_spi_mst0_txoicr,0x8001000e,r
.extAuxRegister io_spi_mst0_rxoicr,0x8001000f,r
.extAuxRegister io_spi_mst0_rxuicr,0x80010010,r
.extAuxRegister io_spi_mst0_icr,0x80010012,r|w
.extAuxRegister io_spi_mst0_clken,0x80010016,r|w
.extAuxRegister io_spi_mst0_dr,0x80010018,r|w
.extAuxRegister io_spi_mst0_rx_sample_dly,0x8001003c,r|w
.set apex_com_arc_hardware_dfss_subsys_bcr_present,1
.extAuxRegister SUBSYS_BUILD,0xf0,r
.extAuxRegister SUBSYS_DSP_0_BUILD,0xa00,r
.extAuxRegister SUBSYS_DSP_0_CONFIG,0xa02,r
.extAuxRegister SUBSYS_IO_0_BUILD,0xa04,r
.extAuxRegister SUBSYS_IO_1_BUILD,0xa05,r
.extAuxRegister SUBSYS_IO_2_BUILD,0xa06,r
.extAuxRegister SUBSYS_UAUX_OFFSET,0xa1e,r
.extAuxRegister SUBSYS_APEX_OFFSET,0xa1f,r
.set apex_com_arc_hardware_dfss_io_spi_mst1_present,1
.extAuxRegister io_spi_mst1_ctrlr0,0x80010100,r|w
.extAuxRegister io_spi_mst1_ctrlr1,0x80010101,r|w
.extAuxRegister io_spi_mst1_spien,0x80010102,r|w
.extAuxRegister io_spi_mst1_ser,0x80010104,r|w
.extAuxRegister io_spi_mst1_baudr,0x80010105,r|w
.extAuxRegister io_spi_mst1_txftlr,0x80010106,r|w
.extAuxRegister io_spi_mst1_rxftlr,0x80010107,r|w
.extAuxRegister io_spi_mst1_txflr,0x80010108,r
.extAuxRegister io_spi_mst1_rxflr,0x80010109,r
.extAuxRegister io_spi_mst1_sr,0x8001010a,r
.extAuxRegister io_spi_mst1_imr,0x8001010b,r|w
.extAuxRegister io_spi_mst1_isr,0x8001010c,r
.extAuxRegister io_spi_mst1_risr,0x8001010d,r
.extAuxRegister io_spi_mst1_txoicr,0x8001010e,r
.extAuxRegister io_spi_mst1_rxoicr,0x8001010f,r
.extAuxRegister io_spi_mst1_rxuicr,0x80010110,r
.extAuxRegister io_spi_mst1_icr,0x80010112,r|w
.extAuxRegister io_spi_mst1_clken,0x80010116,r|w
.extAuxRegister io_spi_mst1_dr,0x80010118,r|w
.extAuxRegister io_spi_mst1_rx_sample_dly,0x8001013c,r|w
.set apex_com_arc_hardware_dfss_io_spi_mst2_present,1
.extAuxRegister io_spi_mst2_ctrlr0,0x80010200,r|w
.extAuxRegister io_spi_mst2_ctrlr1,0x80010201,r|w
.extAuxRegister io_spi_mst2_spien,0x80010202,r|w
.extAuxRegister io_spi_mst2_ser,0x80010204,r|w
.extAuxRegister io_spi_mst2_baudr,0x80010205,r|w
.extAuxRegister io_spi_mst2_txftlr,0x80010206,r|w
.extAuxRegister io_spi_mst2_rxftlr,0x80010207,r|w
.extAuxRegister io_spi_mst2_txflr,0x80010208,r
.extAuxRegister io_spi_mst2_rxflr,0x80010209,r
.extAuxRegister io_spi_mst2_sr,0x8001020a,r
.extAuxRegister io_spi_mst2_imr,0x8001020b,r|w
.extAuxRegister io_spi_mst2_isr,0x8001020c,r
.extAuxRegister io_spi_mst2_risr,0x8001020d,r
.extAuxRegister io_spi_mst2_txoicr,0x8001020e,r
.extAuxRegister io_spi_mst2_rxoicr,0x8001020f,r
.extAuxRegister io_spi_mst2_rxuicr,0x80010210,r
.extAuxRegister io_spi_mst2_icr,0x80010212,r|w
.extAuxRegister io_spi_mst2_clken,0x80010216,r|w
.extAuxRegister io_spi_mst2_dr,0x80010218,r|w
.extAuxRegister io_spi_mst2_rx_sample_dly,0x8001023c,r|w
.set apex_com_arc_hardware_dfss_io_spi_slv0_present,1
.extAuxRegister io_spi_slv0_ctrlr0,0x80011000,r|w
.extAuxRegister io_spi_slv0_spien,0x80011002,r|w
.extAuxRegister io_spi_slv0_txftlr,0x80011006,r|w
.extAuxRegister io_spi_slv0_rxftlr,0x80011007,r|w
.extAuxRegister io_spi_slv0_txflr,0x80011008,r
.extAuxRegister io_spi_slv0_rxflr,0x80011009,r
.extAuxRegister io_spi_slv0_sr,0x8001100a,r
.extAuxRegister io_spi_slv0_imr,0x8001100b,r|w
.extAuxRegister io_spi_slv0_isr,0x8001100c,r
.extAuxRegister io_spi_slv0_risr,0x8001100d,r
.extAuxRegister io_spi_slv0_txoicr,0x8001100e,r
.extAuxRegister io_spi_slv0_rxoicr,0x8001100f,r
.extAuxRegister io_spi_slv0_rxuicr,0x80011010,r
.extAuxRegister io_spi_slv0_icr,0x80011012,r|w
.extAuxRegister io_spi_slv0_clken,0x80011016,r|w
.extAuxRegister io_spi_slv0_dr,0x80011018,r|w
.set apex_com_arc_hardware_dfss_io_gpio1_present,1
.extAuxRegister io_gpio1_debounce,0x80017148,r|w
.extAuxRegister io_gpio1_clken,0x80017180,r|w
.extAuxRegister io_gpio1_swporta_dr,0x80017100,r|w
.extAuxRegister io_gpio1_swporta_ddr,0x80017104,r|w
.extAuxRegister io_gpio1_inten,0x80017130,r|w
.extAuxRegister io_gpio1_intmask,0x80017134,r|w
.extAuxRegister io_gpio1_inttype_level,0x80017138,r|w
.extAuxRegister io_gpio1_int_polarity,0x8001713c,r|w
.extAuxRegister io_gpio1_intstatus,0x80017140,r
.extAuxRegister io_gpio1_raw_intstatus,0x80017144,r
.extAuxRegister io_gpio1_porta_eoi,0x8001714c,w
.extAuxRegister io_gpio1_ext_porta,0x80017150,r
.extAuxRegister io_gpio1_ls_sync,0x80017160,r|w
.extAuxRegister io_gpio1_int_bothedge,0x80017168,r|w
.set apex_com_arc_hardware_dfss_io_gpio2_present,1
.extAuxRegister io_gpio2_debounce,0x80017248,r|w
.extAuxRegister io_gpio2_clken,0x80017280,r|w
.extAuxRegister io_gpio2_swporta_dr,0x80017200,r|w
.extAuxRegister io_gpio2_swporta_ddr,0x80017204,r|w
.extAuxRegister io_gpio2_inten,0x80017230,r|w
.extAuxRegister io_gpio2_intmask,0x80017234,r|w
.extAuxRegister io_gpio2_inttype_level,0x80017238,r|w
.extAuxRegister io_gpio2_int_polarity,0x8001723c,r|w
.extAuxRegister io_gpio2_intstatus,0x80017240,r
.extAuxRegister io_gpio2_raw_intstatus,0x80017244,r
.extAuxRegister io_gpio2_porta_eoi,0x8001724c,w
.extAuxRegister io_gpio2_ext_porta,0x80017250,r
.extAuxRegister io_gpio2_ls_sync,0x80017260,r|w
.extAuxRegister io_gpio2_int_bothedge,0x80017268,r|w
.set apex_com_arc_hardware_dfss_io_i2c_mst1_present,1
.extAuxRegister io_i2c_mst1_clken,0x800121c0,r|w
.extAuxRegister io_i2c_mst1_con,0x80012100,r|w
.extAuxRegister io_i2c_mst1_tar,0x80012104,r|w
.extAuxRegister io_i2c_mst1_data_cmd,0x80012110,r|w
.extAuxRegister io_i2c_mst1_ss_scl_hcnt,0x80012114,r|w
.extAuxRegister io_i2c_mst1_ss_scl_lcnt,0x80012118,r|w
.extAuxRegister io_i2c_mst1_fs_scl_hcnt,0x8001211c,r|w
.extAuxRegister io_i2c_mst1_fs_scl_lcnt,0x80012120,r|w
.extAuxRegister io_i2c_mst1_intr_stat,0x8001212c,r
.extAuxRegister io_i2c_mst1_intr_mask,0x80012130,r|w
.extAuxRegister io_i2c_mst1_raw_intr_stat,0x80012134,r
.extAuxRegister io_i2c_mst1_rx_tl,0x80012138,r|w
.extAuxRegister io_i2c_mst1_tx_tl,0x8001213c,r|w
.extAuxRegister io_i2c_mst1_clr_intr,0x80012140,r
.extAuxRegister io_i2c_mst1_clr_rx_under,0x80012144,r
.extAuxRegister io_i2c_mst1_clr_rx_over,0x80012148,r
.extAuxRegister io_i2c_mst1_clr_tx_over,0x8001214c,r
.extAuxRegister io_i2c_mst1_clr_tx_abrt,0x80012154,r
.extAuxRegister io_i2c_mst1_clr_activity,0x8001215c,r
.extAuxRegister io_i2c_mst1_clr_stop_det,0x80012160,r
.extAuxRegister io_i2c_mst1_clr_start_det,0x80012164,r
.extAuxRegister io_i2c_mst1_enable,0x8001216c,r|w
.extAuxRegister io_i2c_mst1_status,0x80012170,r
.extAuxRegister io_i2c_mst1_txflr,0x80012174,r
.extAuxRegister io_i2c_mst1_rxflr,0x80012178,r
.extAuxRegister io_i2c_mst1_sda_hold,0x8001217c,r|w
.extAuxRegister io_i2c_mst1_tx_abrt_source,0x80012180,r
.extAuxRegister io_i2c_mst1_enable_status,0x8001219c,r
.extAuxRegister io_i2c_mst1_fs_spklen,0x800121a0,r|w
.set apex_com_arc_hardware_dfss_io_i2c_mst2_present,1
.extAuxRegister io_i2c_mst2_clken,0x800122c0,r|w
.extAuxRegister io_i2c_mst2_con,0x80012200,r|w
.extAuxRegister io_i2c_mst2_tar,0x80012204,r|w
.extAuxRegister io_i2c_mst2_data_cmd,0x80012210,r|w
.extAuxRegister io_i2c_mst2_ss_scl_hcnt,0x80012214,r|w
.extAuxRegister io_i2c_mst2_ss_scl_lcnt,0x80012218,r|w
.extAuxRegister io_i2c_mst2_fs_scl_hcnt,0x8001221c,r|w
.extAuxRegister io_i2c_mst2_fs_scl_lcnt,0x80012220,r|w
.extAuxRegister io_i2c_mst2_intr_stat,0x8001222c,r
.extAuxRegister io_i2c_mst2_intr_mask,0x80012230,r|w
.extAuxRegister io_i2c_mst2_raw_intr_stat,0x80012234,r
.extAuxRegister io_i2c_mst2_rx_tl,0x80012238,r|w
.extAuxRegister io_i2c_mst2_tx_tl,0x8001223c,r|w
.extAuxRegister io_i2c_mst2_clr_intr,0x80012240,r
.extAuxRegister io_i2c_mst2_clr_rx_under,0x80012244,r
.extAuxRegister io_i2c_mst2_clr_rx_over,0x80012248,r
.extAuxRegister io_i2c_mst2_clr_tx_over,0x8001224c,r
.extAuxRegister io_i2c_mst2_clr_tx_abrt,0x80012254,r
.extAuxRegister io_i2c_mst2_clr_activity,0x8001225c,r
.extAuxRegister io_i2c_mst2_clr_stop_det,0x80012260,r
.extAuxRegister io_i2c_mst2_clr_start_det,0x80012264,r
.extAuxRegister io_i2c_mst2_enable,0x8001226c,r|w
.extAuxRegister io_i2c_mst2_status,0x80012270,r
.extAuxRegister io_i2c_mst2_txflr,0x80012274,r
.extAuxRegister io_i2c_mst2_rxflr,0x80012278,r
.extAuxRegister io_i2c_mst2_sda_hold,0x8001227c,r|w
.extAuxRegister io_i2c_mst2_tx_abrt_source,0x80012280,r
.extAuxRegister io_i2c_mst2_enable_status,0x8001229c,r
.extAuxRegister io_i2c_mst2_fs_spklen,0x800122a0,r|w
.set apex_com_arc_hardware_dfss_io_uart0_present,1
.extAuxRegister io_uart0_clken,0x800140c0,r|w
.extAuxRegister io_uart0_rbr_thr_dll,0x80014000,r|w
.extAuxRegister io_uart0_ier_dlh,0x80014004,r|w
.extAuxRegister io_uart0_iir_fcr,0x80014008,r|w
.extAuxRegister io_uart0_lcr,0x8001400c,r|w
.extAuxRegister io_uart0_mcr,0x80014010,r|w
.extAuxRegister io_uart0_lsr,0x80014014,r
.extAuxRegister io_uart0_msr,0x80014018,r
.extAuxRegister io_uart0_usr,0x8001407c,r
.set apex_com_arc_hardware_dfss_io_uart1_present,1
.extAuxRegister io_uart1_clken,0x800141c0,r|w
.extAuxRegister io_uart1_rbr_thr_dll,0x80014100,r|w
.extAuxRegister io_uart1_ier_dlh,0x80014104,r|w
.extAuxRegister io_uart1_iir_fcr,0x80014108,r|w
.extAuxRegister io_uart1_lcr,0x8001410c,r|w
.extAuxRegister io_uart1_mcr,0x80014110,r|w
.extAuxRegister io_uart1_lsr,0x80014114,r
.extAuxRegister io_uart1_msr,0x80014118,r
.extAuxRegister io_uart1_usr,0x8001417c,r
.set apex_com_arc_hardware_dfss_io_uart2_present,1
.extAuxRegister io_uart2_clken,0x800142c0,r|w
.extAuxRegister io_uart2_rbr_thr_dll,0x80014200,r|w
.extAuxRegister io_uart2_ier_dlh,0x80014204,r|w
.extAuxRegister io_uart2_iir_fcr,0x80014208,r|w
.extAuxRegister io_uart2_lcr,0x8001420c,r|w
.extAuxRegister io_uart2_mcr,0x80014210,r|w
.extAuxRegister io_uart2_lsr,0x80014214,r
.extAuxRegister io_uart2_msr,0x80014218,r
.extAuxRegister io_uart2_usr,0x8001427c,r
.set apex_com_arc_hardware_dfss_io_uart3_present,1
.extAuxRegister io_uart3_clken,0x800143c0,r|w
.extAuxRegister io_uart3_rbr_thr_dll,0x80014300,r|w
.extAuxRegister io_uart3_ier_dlh,0x80014304,r|w
.extAuxRegister io_uart3_iir_fcr,0x80014308,r|w
.extAuxRegister io_uart3_lcr,0x8001430c,r|w
.extAuxRegister io_uart3_mcr,0x80014310,r|w
.extAuxRegister io_uart3_lsr,0x80014314,r
.extAuxRegister io_uart3_msr,0x80014318,r
.extAuxRegister io_uart3_usr,0x8001437c,r
.set apex_com_arc_hardware_dfss_io_i2s_rx_mst0_present,1
.extAuxRegister io_i2s_rx_mst0_ier,0x8001a000,r|w
.extAuxRegister io_i2s_rx_mst0_irer,0x8001a004,r|w
.extAuxRegister io_i2s_rx_mst0_cer,0x8001a00c,r|w
.extAuxRegister io_i2s_rx_mst0_ccr,0x8001a010,r|w
.extAuxRegister io_i2s_rx_mst0_rxffr,0x8001a014,w
.extAuxRegister io_i2s_rx_mst0_lrbr,0x8001a020,r
.extAuxRegister io_i2s_rx_mst0_rrbr,0x8001a024,r
.extAuxRegister io_i2s_rx_mst0_rer,0x8001a028,r|w
.extAuxRegister io_i2s_rx_mst0_rcr,0x8001a030,r|w
.extAuxRegister io_i2s_rx_mst0_isr,0x8001a038,r
.extAuxRegister io_i2s_rx_mst0_imr,0x8001a03c,r|w
.extAuxRegister io_i2s_rx_mst0_ror,0x8001a040,r
.extAuxRegister io_i2s_rx_mst0_rfcr,0x8001a048,r|w
.extAuxRegister io_i2s_rx_mst0_rff,0x8001a050,w
.extAuxRegister io_i2s_rx_mst0_rxdma,0x8001a1c0,r
.set apex_com_arc_hardware_dfss_io_i2s_tx_mst0_present,1
.extAuxRegister io_i2s_tx_mst0_ier,0x80019000,r|w
.extAuxRegister io_i2s_tx_mst0_iter,0x80019008,r|w
.extAuxRegister io_i2s_tx_mst0_cer,0x8001900c,r|w
.extAuxRegister io_i2s_tx_mst0_ccr,0x80019010,r|w
.extAuxRegister io_i2s_tx_mst0_txffr,0x80019018,w
.extAuxRegister io_i2s_tx_mst0_lthr,0x80019020,w
.extAuxRegister io_i2s_tx_mst0_rthr,0x80019024,w
.extAuxRegister io_i2s_tx_mst0_ter,0x8001902c,r|w
.extAuxRegister io_i2s_tx_mst0_tcr,0x80019034,r|w
.extAuxRegister io_i2s_tx_mst0_isr,0x80019038,r
.extAuxRegister io_i2s_tx_mst0_imr,0x8001903c,r|w
.extAuxRegister io_i2s_tx_mst0_tor,0x80019044,r
.extAuxRegister io_i2s_tx_mst0_tfcr,0x8001904c,r|w
.extAuxRegister io_i2s_tx_mst0_tff,0x80019054,w
.extAuxRegister io_i2s_tx_mst0_txdma,0x800191c8,w
.set apex_com_arc_hardware_dfss_io_pdm_rx0_present,1
.extAuxRegister io_pdm_rx0_pdm_en,0x8001b000,r|w
.extAuxRegister io_pdm_rx0_pdm_ren,0x8001b004,r|w
.extAuxRegister io_pdm_rx0_cer,0x8001b00c,r|w
.extAuxRegister io_pdm_rx0_rxffr,0x8001b014,w
.extAuxRegister io_pdm_rx0_rer0,0x8001b028,r|w
.extAuxRegister io_pdm_rx0_isr,0x8001b038,r
.extAuxRegister io_pdm_rx0_imr,0x8001b03c,r|w
.extAuxRegister io_pdm_rx0_ror,0x8001b040,r
.extAuxRegister io_pdm_rx0_rfcr,0x8001b048,r|w
.extAuxRegister io_pdm_rx0_rxdma,0x8001b1c0,r
.extAuxRegister io_pdm_rx0_pdm_rr,0x8001b1d0,r|w
.extAuxRegister io_pdm_rx0_cic_n,0x8001b1d4,r|w
.extAuxRegister io_pdm_rx0_cic_d,0x8001b1d8,r|w
.extAuxRegister io_pdm_rx0_dcrc,0x8001b1dc,r|w
.extAuxRegister io_pdm_rx0_brc_b0,0x8001b1e0,r|w
.extAuxRegister io_pdm_rx0_brc_clp,0x8001b1f0,r|w
.set apex_com_arc_hardware_floating_point_unit_fpu_present,1
.extAuxRegister fpu_build,0xc8,r
.extAuxRegister fpu_ctrl,0x300,r|w
.extAuxRegister fpu_status,0x301,r|w
.extInstruction fsmadd,6,5,SUFFIX_COND,SYNTAX_3OP
.extInstruction fsmsub,6,6,SUFFIX_COND,SYNTAX_3OP
.extInstruction fsmul,6,0,SUFFIX_COND,SYNTAX_3OP
.extInstruction fsadd,6,1,SUFFIX_COND,SYNTAX_3OP
.extInstruction fssub,6,2,SUFFIX_COND,SYNTAX_3OP
.extInstruction fcvt32,6,8,SUFFIX_COND,SYNTAX_3OP
.extInstruction fsdiv,6,7,SUFFIX_COND,SYNTAX_3OP
.extInstruction fscmp,6,3,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction fscmpf,6,4,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction fssqrt,6,0,FLAGS_NONE,SYNTAX_2OP
.set apex_com_arc_hardware_floating_point_unit_fpu_dp_assist_present,1
.extAuxRegister aux_dpfp1l,0x302,r|w
.extAuxRegister aux_dpfp1h,0x303,r|w
.extAuxRegister aux_dpfp2l,0x304,r|w
.extAuxRegister aux_dpfp2h,0x305,r|w
.extInstruction dmulh11,6,48,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction dmulh12,6,49,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction dmulh21,6,50,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction dmulh22,6,51,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction daddh11,6,52,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction daddh12,6,53,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction daddh21,6,54,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction daddh22,6,55,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction dsubh11,6,56,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction dsubh12,6,57,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction dsubh21,6,58,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction dsubh22,6,59,SUFFIX_COND|SUFFIX_FLAG,SYNTAX_3OP
.extInstruction dexcl1,6,60,SUFFIX_COND,SYNTAX_3OP
.extInstruction dexcl2,6,61,SUFFIX_COND,SYNTAX_3OP

]]></string>
  </configuration>
</config_list>

